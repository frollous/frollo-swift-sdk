# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

orbs:
  jira: circleci/jira@1.2.2

aliases:
  - &restore_gem_cache
      name: Restore gem cache
      keys:
        - gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - gem-cache-v1-{{ arch }}-{{ .Branch }}
        # Fall back to using the latest cache if no exact match is found.
        - gem-cache-v1
  - &save_gem_cache
      name: Save gem cache
      key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - gems
  - &bundle_install
      name: Install Gems via Bundler
      command: bundle install --path gems
  - &restore_carthage_cache
      name: Restore Carthage cache
      keys:
        - carthage-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Cartfile.resolved" }}
        - carthage-cache-v1-{{ arch }}-{{ .Branch }}
        # Fall back to using the latest cache if no exact match is found.
        - carthage-cache-v1
  - &save_carthage_cache
      name: Save Carthage cache
      key: carthage-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Cartfile.resolved" }}
      paths:
        - Carthage
  - &bootstrap_if_needed
      name: Bootstrap Carthage
      command: |
          carthage bootstrap

jobs:
  build-test:

    macos:
      xcode: 12.0.1
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test

    shell: /bin/bash --login -o pipefail
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export XCODE_XCCONFIG_FILE=$PWD/tmp.xcconfig' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - restore_cache: *restore_gem_cache
      - run: *bundle_install
#      - save_cache: *save_gem_cache
#      - restore_cache: *restore_carthage_cache
      - run: *bootstrap_if_needed
#      - save_cache: *save_carthage_cache
      - run:
          name: Install simulators
          command: xcrun simctl create 'iPhone SE (14.0)' com.apple.CoreSimulator.SimDeviceType.iPhone-SE com.apple.CoreSimulator.SimRuntime.iOS-14-0
      - run:
          name: Fastlane
          command: export TERM=${TERM:-dumb} && bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan

workflows:
  build-test:
    jobs:
      - build-test:
          context:
            - ios-context
          post-steps:
            - jira/notify
