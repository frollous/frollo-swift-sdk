// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FrolloSDK
import Alamofire
import AppAuth
import CoreData
import Foundation
@_exported import FrolloSDK
import SafariServices
import Security
import Swift
import SwiftyJSON
import UIKit
import os
extension ReportAccountBalance {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.ReportAccountBalance>
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currency: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
}
public enum EmptyResult<Failure> {
  case success
  case failure(Failure)
}
public enum PaginatedResult<Failure, before, after> {
  case success(before, after)
  case failure(Failure)
}
@objc @_inheritsConvenienceInitializers public class Bill : CoreData.NSManagedObject {
  public enum BillType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case bill
    case manual
    case repayment
    case subscription
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Bill.BillType]
    public static var allCases: [FrolloSDK.Bill.BillType] {
      get
    }
  }
  public enum Frequency : Swift.String, Swift.Codable, Swift.CaseIterable {
    case annually
    case biannually
    case fortnightly
    case fourWeekly
    case irregular
    case monthly
    case quarterly
    case weekly
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Bill.Frequency]
    public static var allCases: [FrolloSDK.Bill.Frequency] {
      get
    }
  }
  public enum PaymentStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case due
    case future
    case overdue
    case paid
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Bill.PaymentStatus]
    public static var allCases: [FrolloSDK.Bill.PaymentStatus] {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case confirmed
    case estimated
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Bill.Status]
    public static var allCases: [FrolloSDK.Bill.Status] {
      get
    }
  }
  public static let billDateFormatter: Foundation.DateFormatter
  public var billType: FrolloSDK.Bill.BillType {
    get
    set
  }
  public var frequency: FrolloSDK.Bill.Frequency {
    get
    set
  }
  public var paymentStatus: FrolloSDK.Bill.PaymentStatus {
    get
    set
  }
  public var status: FrolloSDK.Bill.Status {
    get
    set
  }
  public var endDate: Foundation.Date? {
    get
    set
  }
  public var lastPaymentDate: Foundation.Date? {
    get
    set
  }
  public var nextPaymentDate: Foundation.Date {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Contact {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Contact>
  @objc @NSManaged dynamic public var contactID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nickName: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contactDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contactTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifiedDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccountIDsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isVerified: Swift.Bool {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class DataError : FrolloSDK.FrolloSDKError {
  public enum DataErrorType : Swift.String {
    case api
    case authentication
    case database
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DataErrorSubType : Swift.String {
    case invalidData
    case passwordTooShort
    case revokeTokenURLMissing
    case alreadyLoggedIn
    case loggedOut
    case missingAccessToken
    case missingRefreshToken
    case corrupt
    case diskFull
    case migrationFailed
    case notFound
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var type: FrolloSDK.DataError.DataErrorType
  public var subType: FrolloSDK.DataError.DataErrorSubType
  public var systemError: Swift.Error?
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Transaction : CoreData.NSManagedObject {
  public enum BaseType : Swift.String, Swift.Codable {
    case credit
    case debit
    case other
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable {
    case pending
    case posted
    case scheduled
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public static let transactionDateFormatter: Foundation.DateFormatter
  public var baseType: FrolloSDK.Transaction.BaseType {
    get
    set
  }
  public var budgetCategory: FrolloSDK.BudgetCategory {
    get
    set
  }
  public var postDate: Foundation.Date? {
    get
    set
  }
  public var status: FrolloSDK.Transaction.Status {
    get
    set
  }
  public var transactionDate: Foundation.Date {
    get
    set
  }
  public var userTags: [Swift.String] {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct ProviderLoginForm : Swift.Codable {
  public struct Row : Swift.Codable {
    public var field: [FrolloSDK.ProviderLoginForm.Field]
    public let fieldRowChoice: Swift.String
    public let form: Swift.String
    public let hint: Swift.String?
    public let id: Swift.String
    public let label: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Field : Swift.Codable {
    public let id: Swift.String
    public let image: [Swift.Int8]?
    public let isOptional: Swift.Bool
    public let maxLength: Swift.Int?
    public let name: Swift.String
    public let option: [FrolloSDK.ProviderLoginForm.Option]?
    public let prefix: Swift.String?
    public let suffix: Swift.String?
    public let type: FrolloSDK.ProviderLoginForm.FieldType
    public let validation: [FrolloSDK.ProviderLoginForm.Validation]?
    public var value: Swift.String?
    public let valueEditable: Swift.Bool
    public func imageData() -> Foundation.Data?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Option : Swift.Codable {
    public let displayText: Swift.String
    public let isSelected: Swift.Bool?
    public let optionValue: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Validation : Swift.Codable {
    public let errorMsg: Swift.String
    public let regExp: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public enum FieldType : Swift.String, Swift.Codable {
    case checkbox
    case image
    case option
    case password
    case radio
    case text
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FormType : Swift.String, Swift.Codable {
    case image
    case login
    case questionAndAnswer
    case token
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let forgetPasswordURL: Swift.String?
  public let formType: FrolloSDK.ProviderLoginForm.FormType
  public let help: Swift.String?
  public let mfaInfoText: Swift.String?
  public let mfaTimeout: Swift.Int?
  public let mfaInfoTitle: Swift.String?
  public var row: [FrolloSDK.ProviderLoginForm.Row]
  public mutating func encryptValues(encryptionKey: Swift.String, encryptionAlias: Swift.String)
  public func validateForm() -> (Swift.Bool, Swift.Error?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Database {
  public var viewContext: CoreData.NSManagedObjectContext {
    get
  }
  public func newBackgroundContext() -> CoreData.NSManagedObjectContext
  @objc deinit
}
public protocol AccessToken {
  var expiryDate: Foundation.Date? { get }
  var token: Swift.String { get }
}
public protocol AuthenticationDataSource : AnyObject {
  var accessToken: FrolloSDK.AccessToken? { get }
  var preemptiveRefreshTime: Foundation.TimeInterval? { get }
}
public protocol AuthenticationDelegate : AnyObject {
  func accessTokenExpired(completion: @escaping (Swift.Bool) -> Swift.Void)
  func accessTokenInvalid()
}
@_hasMissingDesignatedInitializers public class Authentication : Alamofire.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: Alamofire.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
  @objc deinit
}
extension Transaction {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Transaction>
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressLine1: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressLine2: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressLine3: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var amount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var baseTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goalID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billPaymentID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var budgetCategoryRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var country: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currency: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var externalID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var formattedAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var included: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var memo: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchantID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var originalDescription: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postcode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var simpleDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var suburb: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionCategoryID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchant: FrolloSDK.Merchant? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionCategory: FrolloSDK.TransactionCategory? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userTagsRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchAmount: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bill: FrolloSDK.Bill? {
    @objc get
    @objc set
  }
}
extension TransactionCategory {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.TransactionCategory>
  @objc @NSManaged dynamic public var categoryTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var defaultBudgetCategoryRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var placement: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionCategoryID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userDefined: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bills: Swift.Set<FrolloSDK.Bill>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var historyReports: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentReports: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactions: Swift.Set<FrolloSDK.Transaction>? {
    @objc get
    @objc set
  }
}
extension TransactionCategory {
  @objc(addBillsObject:) @NSManaged dynamic public func addToBills(_ value: FrolloSDK.Bill)
  @objc(removeBillsObject:) @NSManaged dynamic public func removeFromBills(_ value: FrolloSDK.Bill)
  @objc(addBills:) @NSManaged dynamic public func addToBills(_ values: Swift.Set<FrolloSDK.Bill>)
  @objc(removeBills:) @NSManaged dynamic public func removeFromBills(_ values: Swift.Set<FrolloSDK.Bill>)
}
extension TransactionCategory {
  @objc(addTransactionsObject:) @NSManaged dynamic public func addToTransactions(_ value: FrolloSDK.Transaction)
  @objc(removeTransactionsObject:) @NSManaged dynamic public func removeFromTransactions(_ value: FrolloSDK.Transaction)
  @objc(addTransactions:) @NSManaged dynamic public func addToTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
  @objc(removeTransactions:) @NSManaged dynamic public func removeFromTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
}
extension TransactionCategory {
  @objc(addHistoryReports:) @NSManaged dynamic public func addToHistoryReports(_ values: Foundation.NSSet)
  @objc(removeHistoryReports:) @NSManaged dynamic public func removeFromHistoryReports(_ values: Foundation.NSSet)
}
extension TransactionCategory {
  @objc(addCurrentReports:) @NSManaged dynamic public func addToCurrentReports(_ values: Foundation.NSSet)
  @objc(removeCurrentReports:) @NSManaged dynamic public func removeFromCurrentReports(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers public class BPAYContact : FrolloSDK.Contact {
  public enum CRNType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case fixed
    case variable
    case intelligent
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.BPAYContact.CRNType]
    public static var allCases: [FrolloSDK.BPAYContact.CRNType] {
      get
    }
  }
  public var crnType: FrolloSDK.BPAYContact.CRNType {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@_hasMissingDesignatedInitializers public class Images {
  public func image(context: CoreData.NSManagedObjectContext, imageID: Swift.Int64) -> FrolloSDK.Image?
  public func images(context: CoreData.NSManagedObjectContext, imageTypes: [Swift.String]? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Image.imageID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Image]?
  public func imagesFetchedResultsController(context: CoreData.NSManagedObjectContext, imageTypes: [Swift.String]? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Image.imageID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Image>?
  public func refreshImages(imageType: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
public protocol FrolloSDKError : Foundation.LocalizedError, Swift.CustomDebugStringConvertible {
}
extension MessageText {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.MessageText>
  @objc @NSManaged dynamic public var designType: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var footer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var header: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
}
public typealias FrolloSDKCompletionHandler = (FrolloSDK.EmptyResult<Swift.Error>) -> Swift.Void
public typealias FrolloSDKPaginatedCompletionHandler = (Swift.Result<FrolloSDK.PaginationInfo, Swift.Error>) -> Swift.Void
public typealias PaginationInfo = (before: Swift.String?, after: Swift.String?, total: Swift.Int?)
@_hasMissingDesignatedInitializers public class Frollo {
  public static let shared: FrolloSDK.Frollo
  public static let defaultDataFolderURL: Foundation.URL
  weak public var delegate: FrolloSDK.FrolloSDKDelegate? {
    get
    set
  }
  public var aggregation: FrolloSDK.Aggregation {
    get
  }
  public var authentication: FrolloSDK.Authentication {
    get
  }
  public var oAuth2Authentication: FrolloSDK.OAuth2Authentication?
  public var bills: FrolloSDK.Bills {
    get
  }
  public var budgets: FrolloSDK.Budgets {
    get
  }
  public var database: FrolloSDK.Database {
    get
  }
  public var events: FrolloSDK.Events {
    get
  }
  public var goals: FrolloSDK.Goals {
    get
  }
  public var images: FrolloSDK.Images {
    get
  }
  public var messages: FrolloSDK.Messages {
    get
  }
  public var notifications: FrolloSDK.Notifications {
    get
  }
  public var payDays: FrolloSDK.PayDays {
    get
  }
  public var payments: FrolloSDK.Payments {
    get
  }
  public var reports: FrolloSDK.Reports {
    get
  }
  public var surveys: FrolloSDK.Surveys {
    get
  }
  public var userManagement: FrolloSDK.UserManagement {
    get
  }
  public var contacts: FrolloSDK.Contacts {
    get
  }
  public var cards: FrolloSDK.Cards {
    get
  }
  public var kyc: FrolloSDK.KYC {
    get
  }
  public var setup: Swift.Bool {
    get
  }
  @discardableResult
  public func setup(configuration: FrolloSDK.FrolloSDKConfiguration, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler) -> Foundation.Progress?
  public func reset(completionHandler: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func applicationDidEnterBackground()
  public func applicationWillEnterForeground()
  public func registerPushNotificationToken(_ token: Foundation.Data)
  public func refreshData()
  public func refreshSystem()
  public func downloadData(url: Foundation.URL, completion: ((Swift.Result<Foundation.Data, Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
public struct MerchantSearchResult {
  public var merchantID: Swift.Int64
  public var merchantName: Swift.String?
  public var iconURL: Swift.String?
  public init(merchantID: Swift.Int64, merchantName: Swift.String? = nil, iconURL: Swift.String? = nil)
}
public enum AccountRefreshStatus : Swift.String, Swift.Codable {
  case success
  case adding
  case updating
  case needsAction
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum AccountRefreshSubStatus : Swift.String, Swift.Codable {
  case success
  case partialSuccess
  case inputRequired
  case providerSiteAction
  case reloginRequired
  case temporaryFailure
  case permanentFailure
  case lastNameRequired
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum AccountRefreshAdditionalStatus : Swift.String, Swift.Codable {
  case acceptSplash
  case acceptTermsConditions
  case accountClosed
  case accountLocked
  case accountNotFound
  case accountNotSupported
  case additionalLogin
  case aggregationBeta
  case aggregationError
  case invalidCredentials
  case invalidLanguage
  case loginCancelled
  case logoutRequired
  case mfaEnrollmentNeeded
  case mfaFailed
  case mfaInvalidToken
  case mfaNeeded
  case mfaTimeout
  case passwordExpired
  case registrationDuplicate
  case registrationFailed
  case registrationIncomplete
  case registrationInvalid
  case siteClosed
  case siteError
  case siteUnsupported
  case unknownError
  case verifyCredentials
  case verifyPersonalDetails
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Contacts {
  public static let contactsUpdatedNotification: Foundation.Notification.Name
  public func contact(context: CoreData.NSManagedObjectContext, contactID: Swift.Int64) -> FrolloSDK.Contact?
  public func contacts(context: CoreData.NSManagedObjectContext, type: FrolloSDK.Contact.ContactType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Contact.contactID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Contact]?
  public func contactsFetchedResultsController(context: CoreData.NSManagedObjectContext, type: FrolloSDK.Contact.ContactType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Contact.contactID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Contact>?
  public func refreshContact(contactID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshContacts(before: Swift.String? = nil, after: Swift.String? = nil, size: Swift.Int? = 500, completion: FrolloSDK.FrolloSDKPaginatedCompletionHandler? = nil)
  public func createPayAnyoneContact(name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, accountName: Swift.String, bsb: Swift.String, accountNumber: Swift.String, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createBPAYContact(name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, billerCode: Swift.String, crn: Swift.String, billerName: Swift.String, crnType: FrolloSDK.BPAYContact.CRNType = .fixed, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createPayIDContact(name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, payID: Swift.String, payIDName: Swift.String, payIDType: FrolloSDK.PayIDContact.PayIDType, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createInternationalContact(name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, country: Swift.String, message: Swift.String? = nil, bankCountry: Swift.String, accountNumber: Swift.String, bankAddress: Swift.String? = nil, bic: Swift.String? = nil, fedwireNumber: Swift.String? = nil, sortCode: Swift.String? = nil, chipNumber: Swift.String? = nil, routingNumber: Swift.String? = nil, legalEntityNumber: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updatePayAnyoneContact(contactID: Swift.Int64, name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, accountName: Swift.String, bsb: Swift.String, accountNumber: Swift.String, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateBPAYContact(contactID: Swift.Int64, name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, billerCode: Swift.String, crn: Swift.String, billerName: Swift.String, crnType: FrolloSDK.BPAYContact.CRNType = .fixed, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updatePayIDContact(contactID: Swift.Int64, name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, payID: Swift.String, payIDName: Swift.String, payIDType: FrolloSDK.PayIDContact.PayIDType, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateInternationalContact(contactID: Swift.Int64, name: Swift.String? = nil, nickName: Swift.String, description: Swift.String? = nil, country: Swift.String, message: Swift.String? = nil, bankCountry: Swift.String, accountNumber: Swift.String, bankAddress: Swift.String? = nil, bic: Swift.String? = nil, fedwireNumber: Swift.String? = nil, sortCode: Swift.String? = nil, chipNumber: Swift.String? = nil, routingNumber: Swift.String? = nil, legalEntityNumber: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func deleteContact(contactID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Merchant : CoreData.NSManagedObject {
  public enum MerchantType : Swift.String, Swift.Codable {
    case retailer
    case transactional
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var merchantType: FrolloSDK.Merchant.MerchantType {
    get
    set
  }
  public var smallLogoURL: Foundation.URL? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Card {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Card>
  @objc @NSManaged dynamic public var cardID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nickName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var designTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cancelledDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cardholderName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expiryDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var issuerRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var panLastDigits: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var typeRawValue: Swift.String? {
    @objc get
    @objc set
  }
}
public struct BPAYPaymentResponse : Swift.Codable {
  public let amount: Swift.String
  public let billerCode: Swift.String
  public let billerName: Swift.String
  public let crn: Swift.String
  public let paymentDate: Swift.String
  public let reference: Swift.String?
  public let sourceAccountID: Swift.Int64
  public let sourceAccountName: Swift.String
  public let status: Swift.String
  public let transactionID: Swift.Int64?
  public let transactionReference: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LoginFormError : FrolloSDK.FrolloSDKError {
  public enum LoginFormErrorType : Swift.String {
    case fieldChoiceNotSelected
    case maxLengthExceeded
    case missingRequiredField
    case validationFailed
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var additionalError: Swift.String?
  public var fieldName: Swift.String
  public var type: FrolloSDK.LoginFormError.LoginFormErrorType
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
public struct PayIDResponse : Swift.Codable {
  public enum PayIDStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case available
    case registered
    case unconfirmed
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.PayIDResponse.PayIDStatus]
    public static var allCases: [FrolloSDK.PayIDResponse.PayIDStatus] {
      get
    }
  }
  public var payID: Swift.String
  public var status: FrolloSDK.PayIDResponse.PayIDStatus
  public var type: FrolloSDK.PayIDContact.PayIDType
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class Image : CoreData.NSManagedObject {
  public var smallURL: Foundation.URL {
    get
    set
  }
  public var largeURL: Foundation.URL {
    get
    set
  }
  public var imageTypes: [Swift.String] {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class User : CoreData.NSManagedObject {
  public struct FeatureFlag : Swift.Codable, Swift.Equatable {
    public let enabled: Swift.Bool
    public let feature: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: FrolloSDK.User.FeatureFlag, b: FrolloSDK.User.FeatureFlag) -> Swift.Bool
  }
  public enum Gender : Swift.String, Swift.Codable {
    case female
    case male
    case other
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum HouseholdType : Swift.String, Swift.Codable {
    case couple
    case coupleWithChildren
    case single
    case singleWithChildren
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Industry : Swift.String, Swift.Codable {
    case accommodationAndFoodServices
    case administrativeAndSupportServices
    case artsAndRecreationsServices
    case construction
    case educationAndTraining
    case electricityGasWaterAndWasteServices
    case financialAndInsuranceServices
    case healthCareAndSocialAssistance
    case informationMediaAndTelecommunications
    case manufacturing
    case mining
    case otherServices
    case professionalScientificAndTechnicalServices
    case publicAdministrationAndSafety
    case rentalHiringAndRealEstateServices
    case retailTrade
    case transportPostalAndWarehousing
    case wholesaleTrade
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Occupation : Swift.String, Swift.Codable {
    case clericalAndAdministrativeWorkers
    case communityAndPersonalServiceWorkers
    case labourers
    case machineryOperatorsAndDrivers
    case managers
    case professionals
    case salesWorkers
    case techniciansAndTradesWorkers
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable {
    case accountAdded
    case active
    case budgetReady
    case inactive
    case registered
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OtpMethodType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case sms
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.User.OtpMethodType]
    public static var allCases: [FrolloSDK.User.OtpMethodType] {
      get
    }
  }
  public struct RegisterStep : Swift.Codable, Swift.Equatable {
    public let key: Swift.String
    public let index: Swift.Int
    public let required: Swift.Bool
    public let completed: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: FrolloSDK.User.RegisterStep, b: FrolloSDK.User.RegisterStep) -> Swift.Bool
  }
  public var features: [FrolloSDK.User.FeatureFlag]? {
    get
    set
  }
  public var gender: FrolloSDK.User.Gender? {
    get
    set
  }
  public var householdType: FrolloSDK.User.HouseholdType? {
    get
    set
  }
  public var industry: FrolloSDK.User.Industry? {
    get
    set
  }
  public var occupation: FrolloSDK.User.Occupation? {
    get
    set
  }
  public var status: FrolloSDK.User.Status {
    get
    set
  }
  public var registerSteps: [FrolloSDK.User.RegisterStep]? {
    get
    set
  }
  public var address: FrolloSDK.Address? {
    get
    set
  }
  public var mailingAddress: FrolloSDK.Address? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class Consent : CoreData.NSManagedObject {
  public static let consentDateFormatter: Foundation.DateFormatter
  public enum Status : Swift.String, Swift.Codable {
    case pending
    case active
    case expired
    case withdrawn
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var additionalPermissions: [Swift.String : Swift.Bool]? {
    get
    set
  }
  public var authorizationURL: Foundation.URL? {
    get
    set
  }
  public var confirmationPDFURL: Foundation.URL? {
    get
    set
  }
  public var permissions: [FrolloSDK.CDRPermission] {
    get
    set
  }
  public var sharingDuration: Swift.Int64? {
    get
    set
  }
  public var sharingStartedAt: Foundation.Date? {
    get
    set
  }
  public var sharingStoppedAt: Foundation.Date? {
    get
    set
  }
  public var status: FrolloSDK.Consent.Status {
    get
    set
  }
  public var withdrawalPDFURL: Foundation.URL? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class ReportAccountBalance : CoreData.NSManagedObject {
  public enum Period : Swift.String, Swift.Codable, Swift.CaseIterable {
    case day
    case month
    case week
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.ReportAccountBalance.Period]
    public static var allCases: [FrolloSDK.ReportAccountBalance.Period] {
      get
    }
  }
  public static let dailyDateFormatter: Foundation.DateFormatter
  public static let monthlyDateFormatter: Foundation.DateFormatter
  public static let weeklyDateFormatter: Foundation.DateFormatter
  public var date: Foundation.Date {
    get
    set
  }
  public var period: FrolloSDK.ReportAccountBalance.Period {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Image {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Image>
  @objc @NSManaged dynamic public var imageID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smallURLString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var largeURLString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var typesRawValue: Swift.String {
    @objc get
    @objc set
  }
}
public struct PayAnyoneResponse : Swift.Codable {
  public let amount: Swift.String
  public let description: Swift.String?
  public let destinationBSB: Swift.String?
  public let destinationAccountHolder: Swift.String
  public let destinationAccountNumber: Swift.String?
  public let paymentDate: Swift.String
  public let sourceAccountID: Swift.Int64
  public let sourceAccountName: Swift.String
  public let status: Swift.String
  public let transactionID: Swift.String?
  public let transactionReference: Swift.String
  public let isDuplicate: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class Provider : CoreData.NSManagedObject {
  public enum AuthType : Swift.String, Swift.Codable {
    case credentials
    case mfaCredentials
    case oAuth
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncryptionType : Swift.String, Swift.Codable {
    case unsupported
    case encryptValues
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MFAType : Swift.String, Swift.Codable {
    case image
    case question
    case strongMultiple
    case token
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable {
    case beta
    case disabled
    case supported
    case unsupported
    case outage
    case comingSoon
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AggregatorType : Swift.String, Swift.Codable {
    case yodlee
    case cdr
    case demo
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var authType: FrolloSDK.Provider.AuthType? {
    get
    set
  }
  public var encryptionType: FrolloSDK.Provider.EncryptionType? {
    get
    set
  }
  public var forgotPasswordURL: Foundation.URL? {
    get
    set
  }
  public var largeLogoURL: Foundation.URL? {
    get
    set
  }
  public var loginForm: FrolloSDK.ProviderLoginForm? {
    get
    set
  }
  public var loginURL: Foundation.URL? {
    get
    set
  }
  public var mfaType: FrolloSDK.Provider.MFAType? {
    get
    set
  }
  public var smallLogoURL: Foundation.URL? {
    get
    set
  }
  public var status: FrolloSDK.Provider.Status {
    get
    set
  }
  public var aggregatorType: FrolloSDK.Provider.AggregatorType {
    get
    set
  }
  public var permissions: [FrolloSDK.CDRPermission] {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public enum BudgetCategory : Swift.String, Swift.Codable, Swift.CaseIterable {
  case income
  case lifestyle
  case living
  case oneOff
  case savings
  public init?(id: Swift.Int64)
  public var id: Swift.Int64 {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [FrolloSDK.BudgetCategory]
  public static var allCases: [FrolloSDK.BudgetCategory] {
    get
  }
}
public enum TransactionReportFilter {
  case budgetCategory(id: Swift.Int64?)
  case merchant(id: Swift.Int64?)
  case category(id: Swift.Int64?)
  case tag(name: Swift.String?)
  public var entity: Swift.String {
    get
  }
}
public struct Address : Swift.Codable {
  public init(addressID: Swift.String? = nil, addressType: FrolloSDK.Address.AddressType? = nil, buildingName: Swift.String? = nil, unitNumber: Swift.String? = nil, streetNumber: Swift.String? = nil, streetName: Swift.String? = nil, streetType: Swift.String? = nil, suburb: Swift.String? = nil, town: Swift.String? = nil, region: Swift.String? = nil, state: Swift.String? = nil, country: Swift.String? = nil, postcode: Swift.String? = nil, longForm: Swift.String? = nil)
  public enum AddressType : Swift.String, Swift.Codable {
    case other
    case residential1
    case residential2
    case residential3
    case residential4
    case business
    case postal
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var addressID: Swift.String?
  public var addressType: FrolloSDK.Address.AddressType?
  public var buildingName: Swift.String?
  public var unitNumber: Swift.String?
  public var streetNumber: Swift.String?
  public var streetName: Swift.String?
  public var streetType: Swift.String?
  public var suburb: Swift.String?
  public var town: Swift.String?
  public var region: Swift.String?
  public var state: Swift.String?
  public var country: Swift.String?
  public var postcode: Swift.String?
  public let longForm: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension CDRConfiguration {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.CDRConfiguration>
  @objc @NSManaged dynamic public var supportEmail: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var adrID: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var adrName: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sharingDurationRawValue: Foundation.Data {
    @objc get
    @objc set
  }
}
extension BudgetPeriod {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.BudgetPeriod>
  @objc @NSManaged dynamic public var budgetPeriodID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var budgetID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var index: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targetAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var budget: FrolloSDK.Budget? {
    @objc get
    @objc set
  }
}
extension BillPayment {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.BillPayment>
  @objc @NSManaged dynamic public var billPaymentID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchantID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frequencyRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var amount: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bill: FrolloSDK.Bill? {
    @objc get
    @objc set
  }
}
public struct TransactionFilter {
  public init(transactionIDs: [Swift.Int64]? = nil, accountIDs: [Swift.Int64]? = nil, budgetCategories: [FrolloSDK.BudgetCategory]? = nil, transactionCategoryIDs: [Swift.Int64]? = nil, merchantIDs: [Swift.Int64]? = nil, searchTerm: Swift.String? = nil, minimumAmount: Swift.String? = nil, maximumAmount: Swift.String? = nil, baseType: FrolloSDK.Transaction.BaseType? = nil, tags: [Swift.String]? = nil, status: FrolloSDK.Transaction.Status? = nil, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, transactionIncluded: Swift.Bool? = nil, accountIncluded: Swift.Bool? = nil, after: Swift.String? = nil, before: Swift.String? = nil, billID: Swift.Int64? = nil, goalID: Swift.Int64? = nil, size: Swift.Int? = nil)
  public var transactionIDs: [Swift.Int64]?
  public var accountIDs: [Swift.Int64]?
  public var budgetCategories: [FrolloSDK.BudgetCategory]?
  public var transactionCategoryIDs: [Swift.Int64]?
  public var merchantIDs: [Swift.Int64]?
  public var searchTerm: Swift.String?
  public var minimumAmount: Swift.String?
  public var maximumAmount: Swift.String?
  public var baseType: FrolloSDK.Transaction.BaseType?
  public var tags: [Swift.String]?
  public var status: FrolloSDK.Transaction.Status?
  public var fromDate: Swift.String?
  public var toDate: Swift.String?
  public var transactionIncluded: Swift.Bool?
  public var accountIncluded: Swift.Bool?
  public var after: Swift.String?
  public var before: Swift.String?
  public var billID: Swift.Int64?
  public var goalID: Swift.Int64?
  public var size: Swift.Int?
  public var filterPredicates: [Foundation.NSPredicate] {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GoalPeriod : CoreData.NSManagedObject {
  public static let goalPeriodDateFormatter: Foundation.DateFormatter
  public var endDate: Foundation.Date {
    get
    set
  }
  public var startDate: Foundation.Date {
    get
    set
  }
  public var trackingStatus: FrolloSDK.Goal.TrackingStatus? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class InternationalContact : FrolloSDK.Contact {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProviderAccount : CoreData.NSManagedObject {
  public var loginForm: FrolloSDK.ProviderLoginForm? {
    get
    set
  }
  public var refreshStatus: FrolloSDK.AccountRefreshStatus {
    get
    set
  }
  public var refreshSubStatus: FrolloSDK.AccountRefreshSubStatus? {
    get
    set
  }
  public var refreshAdditionalStatus: FrolloSDK.AccountRefreshAdditionalStatus? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension AccountBalanceTier {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.AccountBalanceTier>
  @objc @NSManaged dynamic public var maximum: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimum: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
}
extension Bill {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Bill>
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var averageAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var details: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dueAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frequencyRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastAmount: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastPaymentDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchantID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextPaymentDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var paymentStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionCategoryID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchant: FrolloSDK.Merchant? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactionCategory: FrolloSDK.TransactionCategory? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var payments: Swift.Set<FrolloSDK.BillPayment>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactions: Swift.Set<FrolloSDK.Transaction>? {
    @objc get
    @objc set
  }
}
extension Bill {
  @objc(addPaymentsObject:) @NSManaged dynamic public func addToPayments(_ value: FrolloSDK.BillPayment)
  @objc(removePaymentsObject:) @NSManaged dynamic public func removeFromPayments(_ value: FrolloSDK.BillPayment)
  @objc(addPayments:) @NSManaged dynamic public func addToPayments(_ values: Swift.Set<FrolloSDK.BillPayment>)
  @objc(removePayments:) @NSManaged dynamic public func removeFromPayments(_ values: Swift.Set<FrolloSDK.BillPayment>)
}
extension Bill {
  @objc(addTransactionsObject:) @NSManaged dynamic public func addToTransactions(_ value: FrolloSDK.Transaction)
  @objc(removeTransactionsObject:) @NSManaged dynamic public func removeFromTransactions(_ value: FrolloSDK.Transaction)
  @objc(addTransactions:) @NSManaged dynamic public func addToTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
  @objc(removeTransactions:) @NSManaged dynamic public func removeFromTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
}
@objc @_inheritsConvenienceInitializers public class Contact : CoreData.NSManagedObject {
  public enum ContactType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case payAnyone
    case payID
    case BPAY
    case international
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [FrolloSDK.Contact.ContactType]
    public static var allCases: [FrolloSDK.Contact.ContactType] {
      get
    }
  }
  public var contactType: FrolloSDK.Contact.ContactType {
    get
    set
  }
  public var associatedProviderAccountIDs: [Swift.Int64]? {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct PaymentTransferResponse : Swift.Codable {
  public let amount: Swift.String
  public let description: Swift.String?
  public let destinationAccountHolder: Swift.String
  public let destinationAccountID: Swift.Int64
  public let paymentDate: Swift.String
  public let sourceAccountID: Swift.Int64
  public let sourceAccountName: Swift.String
  public let status: Swift.String
  public let transactionID: Swift.Int64?
  public let transactionReference: Swift.String
  public let isDuplicate: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class MessageVideo : FrolloSDK.Message {
  public var iconURL: Foundation.URL? {
    get
    set
  }
  public var url: Foundation.URL {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct APIGroupReport : Swift.Codable {
  public let income: Swift.Bool
  public let id: Swift.Int64
  public let name: Swift.String
  public let transactionIDs: [Swift.Int64]
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AccountPayIDResponse : Swift.Codable {
  public enum PayIDStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case active
    case portable
    case deregistered
    case disabled
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.AccountPayIDResponse.PayIDStatus]
    public static var allCases: [FrolloSDK.AccountPayIDResponse.PayIDStatus] {
      get
    }
  }
  public var payID: Swift.String
  public var status: FrolloSDK.AccountPayIDResponse.PayIDStatus
  public var type: FrolloSDK.PayIDContact.PayIDType
  public var name: Swift.String
  public var createdAt: Swift.String?
  public var updatedAt: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Notifications {
  @available(*, deprecated, message: "Use `FrolloSDK.registerPushNotificationToken()` instead")
  public func registerPushNotificationToken(_ token: Foundation.Data)
  public func handlePushNotification(userInfo: [Swift.AnyHashable : Any])
  @objc deinit
}
public struct VerifyPayIDResponse : Swift.Codable {
  public let type: FrolloSDK.PayIDContact.PayIDType
  public let payID: Swift.String
  public let name: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class NetworkError : FrolloSDK.FrolloSDKError {
  public enum NetworkErrorType : Swift.String {
    case connectionFailure
    case invalidSSL
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var systemError: Foundation.NSError?
  public var type: FrolloSDK.NetworkError.NetworkErrorType
  @objc deinit
}
extension PayDay {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.PayDay>
  @objc @NSManaged dynamic public var lastDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class Cards {
  public func createCard(accountID: Swift.Int64, firstName: Swift.String, middleName: Swift.String? = nil, lastName: Swift.String, unitNumber: Swift.String? = nil, buildingName: Swift.String? = nil, streetNumber: Swift.String, streetName: Swift.String, streetType: Swift.String = "street", postalAddressSuburb: Swift.String, postalCode: Swift.String, postalAddressState: Swift.String, postalAddressCountry: Swift.String, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func cards(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Card.cardID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Card]?
  public func card(context: CoreData.NSManagedObjectContext, cardID: Swift.Int64) -> FrolloSDK.Card?
  public func refreshCards(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshCard(cardID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateCard(cardID: Swift.Int64, status: FrolloSDK.Card.CardStatus? = nil, nickName: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
extension Consent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Consent>
  @objc @NSManaged dynamic public var consentID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var additionalPermissionsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var authorizationURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var confirmationPDFURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var permissionObjectsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sharingDurationRawValue: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sharingStartedAtRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sharingStoppedAtRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var withdrawalPDFURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var provider: FrolloSDK.Provider? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccount: FrolloSDK.ProviderAccount? {
    @objc get
    @objc set
  }
}
extension Reports {
  public enum Period : Swift.String, Swift.Codable, Swift.CaseIterable {
    case annually
    case biannually
    case daily
    case fortnightly
    case fourWeekly
    case monthly
    case quarterly
    case weekly
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Reports.Period]
    public static var allCases: [FrolloSDK.Reports.Period] {
      get
    }
  }
  public static let dailyDateFormatter: Foundation.DateFormatter
  public static let monthlyDateFormatter: Foundation.DateFormatter
  public static let weeklyDateFormatter: Foundation.DateFormatter
}
@objc @_inheritsConvenienceInitializers public class BillPayment : CoreData.NSManagedObject {
  public static let billDateFormatter: Foundation.DateFormatter
  public var date: Foundation.Date {
    get
    set
  }
  public var frequency: FrolloSDK.Bill.Frequency {
    get
    set
  }
  public var paymentStatus: FrolloSDK.Bill.PaymentStatus {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public protocol Reportable {
  static var grouping: FrolloSDK.ReportGrouping { get }
  var value: Foundation.Decimal { get }
  var name: Swift.String { get }
  init(groupReport: FrolloSDK.APIGroupReport)
}
@_hasMissingDesignatedInitializers public class ReportResponse<T> where T : FrolloSDK.Reportable {
  final public let groupReports: [T]
  final public let isIncome: Swift.Bool
  final public let date: Swift.String
  final public let value: Foundation.Decimal
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GroupReport {
  public var transactionIDs: [Swift.Int64]
  public var name: Swift.String
  public var value: Foundation.Decimal
  public var isIncome: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BudgetCategoryGroupReport : FrolloSDK.GroupReport {
  final public var budgetCategory: FrolloSDK.BudgetCategory
  public init(groupReport: FrolloSDK.APIGroupReport)
  @objc deinit
}
extension BudgetCategoryGroupReport : FrolloSDK.Reportable {
  public static var grouping: FrolloSDK.ReportGrouping {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TransactionCategoryGroupReport : FrolloSDK.GroupReport {
  final public var id: Swift.Int64
  public init(groupReport: FrolloSDK.APIGroupReport)
  @objc deinit
}
extension TransactionCategoryGroupReport : FrolloSDK.Reportable {
  public static var grouping: FrolloSDK.ReportGrouping {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TagGroupReport : FrolloSDK.GroupReport {
  public init(groupReport: FrolloSDK.APIGroupReport)
  @objc deinit
}
extension TagGroupReport : FrolloSDK.Reportable {
  public static var grouping: FrolloSDK.ReportGrouping {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MerchantGroupReport : FrolloSDK.GroupReport {
  final public var id: Swift.Int64
  public init(groupReport: FrolloSDK.APIGroupReport)
  @objc deinit
}
extension MerchantGroupReport : FrolloSDK.Reportable {
  public static var grouping: FrolloSDK.ReportGrouping {
    get
  }
}
public struct CDRConsentForm : Swift.Codable {
  public struct Post {
    public let providerID: Swift.Int64
    public let sharingDuration: Swift.Int64
    public let permissions: [Swift.String]
    public let additionalPermissions: [Swift.String : Swift.Bool]
    public let existingConsentID: Swift.Int64?
    public init(providerID: Swift.Int64, sharingDuration: Swift.Int64, permissions: [Swift.String], additionalPermissions: [Swift.String : Swift.Bool] = [:], existingConsentID: Swift.Int64?)
  }
  public struct Put {
    public enum Status : Swift.String, Swift.Codable {
      case withdrawn
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
    }
    public let status: FrolloSDK.CDRConsentForm.Put.Status?
    public init(status: FrolloSDK.CDRConsentForm.Put.Status? = nil, deleteRedundantData: Swift.Bool? = true, sharingDuration: Swift.Int64? = nil)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class Budget : CoreData.NSManagedObject {
  public enum Frequency : Swift.String, Swift.Codable, Swift.CaseIterable {
    case annually
    case biannually
    case daily
    case fortnightly
    case fourWeekly
    case monthly
    case quarterly
    case singular
    case weekly
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Budget.Frequency]
    public static var allCases: [FrolloSDK.Budget.Frequency] {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case active
    case cancelled
    case completed
    case failed
    case finalising
    case unstarted
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Budget.Status]
    public static var allCases: [FrolloSDK.Budget.Status] {
      get
    }
  }
  public enum TrackingStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case above
    case below
    case equal
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Budget.TrackingStatus]
    public static var allCases: [FrolloSDK.Budget.TrackingStatus] {
      get
    }
  }
  public enum BudgetType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case account
    case budgetCategory
    case category
    case merchant
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Budget.BudgetType]
    public static var allCases: [FrolloSDK.Budget.BudgetType] {
      get
    }
  }
  public enum TrackingType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case credit
    case debit
    case debitCredit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Budget.TrackingType]
    public static var allCases: [FrolloSDK.Budget.TrackingType] {
      get
    }
  }
  public var currentPeriod: FrolloSDK.BudgetPeriod? {
    get
  }
  public static let budgetDateFormatter: Foundation.DateFormatter
  public var startDate: Foundation.Date? {
    get
    set
  }
  public var frequency: FrolloSDK.Budget.Frequency {
    get
    set
  }
  public var metadata: SwiftyJSON.JSON {
    get
    set
  }
  public var status: FrolloSDK.Budget.Status {
    get
    set
  }
  public var trackingStatus: FrolloSDK.Budget.TrackingStatus {
    get
    set
  }
  public var budgetType: FrolloSDK.Budget.BudgetType {
    get
    set
  }
  public var trackingType: FrolloSDK.Budget.TrackingType {
    get
    set
  }
  public var imageURL: Foundation.URL? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension ProviderAccount {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.ProviderAccount>
  @objc @NSManaged dynamic public var editable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var externalID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastRefreshed: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var loginFormRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextRefresh: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshAdditionalStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshSubStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accounts: Swift.Set<FrolloSDK.Account>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var provider: FrolloSDK.Provider? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var consents: Swift.Set<FrolloSDK.Consent>? {
    @objc get
    @objc set
  }
}
extension ProviderAccount {
  @objc(addAccountsObject:) @NSManaged dynamic public func addToAccounts(_ value: FrolloSDK.Account)
  @objc(removeAccountsObject:) @NSManaged dynamic public func removeFromAccounts(_ value: FrolloSDK.Account)
  @objc(addAccounts:) @NSManaged dynamic public func addToAccounts(_ values: Swift.Set<FrolloSDK.Account>)
  @objc(removeAccounts:) @NSManaged dynamic public func removeFromAccounts(_ values: Swift.Set<FrolloSDK.Account>)
}
extension ProviderAccount {
  @objc(addConsentsObject:) @NSManaged dynamic public func addToConsents(_ value: FrolloSDK.Consent)
  @objc(removeConsentsObject:) @NSManaged dynamic public func removeFromConsents(_ value: FrolloSDK.Consent)
  @objc(addConsents:) @NSManaged dynamic public func addToConsents(_ values: Swift.Set<FrolloSDK.Consent>)
  @objc(removeConsents:) @NSManaged dynamic public func removeFromConsents(_ values: Swift.Set<FrolloSDK.Consent>)
}
@objc @_inheritsConvenienceInitializers public class Account : CoreData.NSManagedObject {
  public struct AccountFeature : Swift.Codable {
    public let id: FrolloSDK.Account.AccountFeatureType
    public let name: Swift.String?
    public let imageURL: Swift.String?
    public let details: [FrolloSDK.Account.AccountFeatureDetail]?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public enum AccountFeatureType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case payments
    case transfers
    case statements
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.AccountFeatureType]
    public static var allCases: [FrolloSDK.Account.AccountFeatureType] {
      get
    }
  }
  public struct AccountFeatureDetail : Swift.Codable {
    public let id: FrolloSDK.Account.AccountFeatureSubType
    public let name: Swift.String?
    public let imageURL: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public enum AccountFeatureSubType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case bpay
    case npp
    case payAnyone
    case internalTransfer
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.AccountFeatureSubType]
    public static var allCases: [FrolloSDK.Account.AccountFeatureSubType] {
      get
    }
  }
  public enum AccountStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case active
    case closed
    case inactive
    case toBeClosed
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.AccountStatus]
    public static var allCases: [FrolloSDK.Account.AccountStatus] {
      get
    }
  }
  public enum AccountSubType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case other
    case bankAccount
    case savings
    case emergencyFund
    case termDeposit
    case bills
    case offset
    case travel
    case prepaid
    case balanceTransferCard
    case rewardsCard
    case creditCard
    case superAnnuation
    case shares
    case business
    case bonds
    case pension
    case mortgage
    case mortgageFixed
    case mortgageVariable
    case investmentHomeLoanFixed
    case investmentHomeLoanVariable
    case studentLoan
    case carLoan
    case lineOfCredit
    case p2pLending
    case personal
    case autoInsurance
    case healthInsurance
    case homeInsurance
    case lifeInsurance
    case travelInsurance
    case insurance
    case reward
    case creditScore
    case healthScore
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.AccountSubType]
    public static var allCases: [FrolloSDK.Account.AccountSubType] {
      get
    }
  }
  public enum AccountType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case bank
    case bill
    case creditCard
    case creditScore
    case insurance
    case investment
    case loan
    case reward
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.AccountType]
    public static var allCases: [FrolloSDK.Account.AccountType] {
      get
    }
  }
  public enum Classification : Swift.String, Swift.Codable, Swift.CaseIterable {
    case addOnCard
    case corporate
    case other
    case personal
    case smallBusiness
    case trust
    case virtualCard
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.Classification]
    public static var allCases: [FrolloSDK.Account.Classification] {
      get
    }
  }
  public enum Group : Swift.String, Swift.Codable, Swift.CaseIterable {
    case bank
    case savings
    case creditCard
    case superAnnuation
    case investment
    case loan
    case insurance
    case reward
    case score
    case custom
    case other
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Account.Group]
    public static var allCases: [FrolloSDK.Account.Group] {
      get
    }
  }
  public var accountStatus: FrolloSDK.Account.AccountStatus {
    get
    set
  }
  public var accountSubType: FrolloSDK.Account.AccountSubType {
    get
    set
  }
  public var accountType: FrolloSDK.Account.AccountType {
    get
    set
  }
  public var classification: FrolloSDK.Account.Classification? {
    get
    set
  }
  public var features: [FrolloSDK.Account.AccountFeature]? {
    get
    set
  }
  public var goalIDs: [Swift.Int64]? {
    get
    set
  }
  public var group: FrolloSDK.Account.Group {
    get
    set
  }
  public var refreshStatus: FrolloSDK.AccountRefreshStatus {
    get
    set
  }
  public var refreshSubStatus: FrolloSDK.AccountRefreshSubStatus? {
    get
    set
  }
  public var refreshAdditionalStatus: FrolloSDK.AccountRefreshAdditionalStatus? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public class UserKYC : Swift.Codable {
  public var addresses: [FrolloSDK.Address]
  public var dateOfBirth: FrolloSDK.UserKYC.DateOfBirth
  public var email: Swift.String
  public var gender: Swift.String
  public var mobileNumber: Swift.String?
  public var name: FrolloSDK.UserKYC.Name
  public var identityDocuments: [FrolloSDK.UserKYC.IdentityDocument]
  public var kycDetails: FrolloSDK.UserKYC.KYCDetails?
  public init(addresses: [FrolloSDK.Address], dateOfBirth: FrolloSDK.UserKYC.DateOfBirth, email: Swift.String, gender: Swift.String, mobileNumber: Swift.String? = nil, name: FrolloSDK.UserKYC.Name, identityDocuments: [FrolloSDK.UserKYC.IdentityDocument], kycDetails: FrolloSDK.UserKYC.KYCDetails? = nil)
  public class IdentityDocument : Swift.Codable {
    public var country: Swift.String?
    public var idExpiry: Swift.String?
    public var idNumber: Swift.String
    public var idSubType: Swift.String?
    public var idType: FrolloSDK.UserKYC.IdentityDocument.IDType
    public var region: Swift.String?
    public init(country: Swift.String? = nil, idExpiry: Swift.String? = nil, idNumber: Swift.String, idSubType: Swift.String? = nil, idType: FrolloSDK.UserKYC.IdentityDocument.IDType, region: Swift.String? = nil)
    public enum IDType : Swift.String, Swift.Codable {
      case other
      case driverLicence
      case passport
      case visa
      case immigration
      case nationalID
      case taxID
      case nationalHealthID
      case concession
      case healthConcession
      case pension
      case militaryID
      case birthCert
      case citizenship
      case marriageCert
      case deathCert
      case nameChange
      case utilityBill
      case bankStatement
      case intentProof
      case assestation
      case selfImage
      case emailAddress
      case msisdn
      case device
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
    }
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public class Name : Swift.Codable {
    public var displayName: Swift.String?
    public var familyName: Swift.String?
    public var givenName: Swift.String?
    public var honourific: Swift.String?
    public var middleName: Swift.String?
    public init(displayName: Swift.String? = nil, familyName: Swift.String? = nil, givenName: Swift.String? = nil, honourific: Swift.String? = nil, middleName: Swift.String? = nil)
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public class DateOfBirth : Swift.Codable {
    public var dateOfBirth: Swift.String?
    public var yearOfBirth: Swift.String?
    public init(dateOfBirth: Swift.String? = nil, yearOfBirth: Swift.String? = nil)
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public class KYCDetails : Swift.Codable {
    public var status: Swift.String
    public init(status: Swift.String)
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Aggregation {
  public enum OrderType : Swift.String {
    case asc
    case desc
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SortType : Swift.String {
    case name
    case relevance
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias MerchantSearchResponse = (data: [FrolloSDK.MerchantSearchResult], before: Swift.String?, after: Swift.String?)
  public typealias TransactionPaginationInfo = (before: Swift.String?, after: Swift.String?, total: Swift.Int?, beforeID: Swift.Int64?, afterID: Swift.Int64?, beforeDate: Swift.String?, afterDate: Swift.String?)
  public typealias TransactionPaginatedCompletionHandler = (Swift.Result<FrolloSDK.Aggregation.TransactionPaginationInfo, Swift.Error>) -> Swift.Void
  public typealias tagApplyAllPairs = (Swift.String, Swift.Bool)
  public static let accountsUpdatedNotification: Foundation.Notification.Name
  public static let providersUpdatedNotification: Foundation.Notification.Name
  public static let providerAccountsUpdatedNotification: Foundation.Notification.Name
  public static let merchantsUpdatedNotification: Foundation.Notification.Name
  public static let transactionsUpdatedNotification: Foundation.Notification.Name
  public static let transactionCategoriesUpdatedNotification: Foundation.Notification.Name
  public static let consentsUpdatedNotification: Foundation.Notification.Name
  public static let refreshTransactionsNotification: Foundation.Notification.Name
  public func provider(context: CoreData.NSManagedObjectContext, providerID: Swift.Int64) -> FrolloSDK.Provider?
  public func providers(context: CoreData.NSManagedObjectContext, status: FrolloSDK.Provider.Status? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Provider.providerID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Provider]?
  public func providersFetchedResultsController(context: CoreData.NSManagedObjectContext, status: FrolloSDK.Provider.Status? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Provider.providerID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Provider>?
  public func refreshProviders(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshProvider(providerID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func consent(context: CoreData.NSManagedObjectContext, consentID: Swift.Int64) -> FrolloSDK.Consent?
  public func consents(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Consent.consentID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Consent]?
  public func consentsFetchedResultsController(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Consent.consentID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Consent>?
  public func refreshConsents(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshConsent(consentID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func submitCDRConsent(consent: FrolloSDK.CDRConsentForm.Post, completion: ((Swift.Result<Swift.Int64, Swift.Error>) -> Swift.Void)?)
  public func updateCDRConsent(id: Swift.Int64, consent: FrolloSDK.CDRConsentForm.Put, completion: FrolloSDK.FrolloSDKCompletionHandler?)
  public func withdrawCDRConsent(id: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler?)
  public func updateCDRConsentSharingPeriod(id: Swift.Int64, sharingDuration: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler?)
  public func refreshCDRConfiguration(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func cdrConfiguration(context: CoreData.NSManagedObjectContext) -> FrolloSDK.CDRConfiguration?
  public func providerAccount(context: CoreData.NSManagedObjectContext, providerAccountID: Swift.Int64) -> FrolloSDK.ProviderAccount?
  public func providerAccounts(context: CoreData.NSManagedObjectContext, refreshStatus: FrolloSDK.AccountRefreshStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(ProviderAccount.providerAccountID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.ProviderAccount]?
  public func providerAccountsFetchedResultsController(context: CoreData.NSManagedObjectContext, refreshStatus: FrolloSDK.AccountRefreshStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(ProviderAccount.providerAccountID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.ProviderAccount>?
  public func refreshProviderAccounts(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshProviderAccount(providerAccountID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createProviderAccount(providerID: Swift.Int64, consentID: Swift.Int64? = nil, loginForm: FrolloSDK.ProviderLoginForm, completion: ((Swift.Result<Swift.Int64, Swift.Error>) -> Swift.Void)? = nil)
  public func deleteProviderAccount(providerAccountID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateProviderAccount(providerAccountID: Swift.Int64, loginForm: FrolloSDK.ProviderLoginForm, consentID: Swift.Int64?, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func syncProviderAccounts(providerAccountIDs: [Swift.Int64], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func account(context: CoreData.NSManagedObjectContext, accountID: Swift.Int64) -> FrolloSDK.Account?
  public func accounts(context: CoreData.NSManagedObjectContext, accountStatus: FrolloSDK.Account.AccountStatus? = nil, accountSubType: FrolloSDK.Account.AccountSubType? = nil, accountType: FrolloSDK.Account.AccountType? = nil, classification: FrolloSDK.Account.Classification? = nil, favourite: Swift.Bool? = nil, hidden: Swift.Bool? = nil, included: Swift.Bool? = nil, refreshStatus: FrolloSDK.AccountRefreshStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Account.accountID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Account]?
  public func accountsFetchedResultsController(context: CoreData.NSManagedObjectContext, accountStatus: FrolloSDK.Account.AccountStatus? = nil, accountSubType: FrolloSDK.Account.AccountSubType? = nil, accountType: FrolloSDK.Account.AccountType? = nil, classification: FrolloSDK.Account.Classification? = nil, favourite: Swift.Bool? = nil, hidden: Swift.Bool? = nil, included: Swift.Bool? = nil, refreshStatus: FrolloSDK.AccountRefreshStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Account.accountID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Account>?
  public func refreshAccounts(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshAccount(accountID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateAccount(accountID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func fetchProducts(accountID: Swift.Int64, completion: ((Swift.Result<[FrolloSDK.CDRProduct], Swift.Error>) -> Swift.Void)?)
  public func transaction(context: CoreData.NSManagedObjectContext, transactionID: Swift.Int64) -> FrolloSDK.Transaction?
  public func transactions(context: CoreData.NSManagedObjectContext, baseType: FrolloSDK.Transaction.BaseType? = nil, budgetCategory: FrolloSDK.BudgetCategory? = nil, status: FrolloSDK.Transaction.Status? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Transaction.transactionID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Transaction]?
  public func transactions(context: CoreData.NSManagedObjectContext, transactionFilter: FrolloSDK.TransactionFilter? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Transaction.transactionID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Transaction]?
  public func transactionsFetchedResultsController(context: CoreData.NSManagedObjectContext, baseType: FrolloSDK.Transaction.BaseType? = nil, budgetCategory: FrolloSDK.BudgetCategory? = nil, status: FrolloSDK.Transaction.Status? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Transaction.transactionID), ascending: true)], batchSize: Swift.Int? = nil, limit: Swift.Int? = nil, sectionNameKeypath: Swift.String? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Transaction>?
  public func refreshTransactions(transactionFilter: FrolloSDK.TransactionFilter? = nil, completion: FrolloSDK.Aggregation.TransactionPaginatedCompletionHandler? = nil)
  public func refreshTransaction(transactionID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshTransactions(transactionIDs: [Swift.Int64], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshTransactionsByDate(fromDate: Foundation.Date? = nil, toDate: Foundation.Date? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func excludeTransaction(transactionID: Swift.Int64, excluded: Swift.Bool, excludeAll: Swift.Bool, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func recategoriseTransaction(transactionID: Swift.Int64, transactionCategoryID: Swift.Int64, recategoriseAll: Swift.Bool, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateTransaction(transactionID: Swift.Int64, budgetCategoryApplyAll: Swift.Bool? = nil, includeApplyAll: Swift.Bool? = nil, recategoriseAll: Swift.Bool? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func transactionSearch(searchTerm: Swift.String, page: Swift.Int = 0, from fromDate: Foundation.Date? = nil, to toDate: Foundation.Date? = nil, accountIDs: [Swift.Int64]? = nil, onlyIncludedAccounts: Swift.Bool? = nil, completion: @escaping (Swift.Result<[Swift.Int64], Swift.Error>) -> Swift.Void)
  public func transactionSummary(from fromDate: Foundation.Date, to toDate: Foundation.Date, accountIDs: [Swift.Int64]? = nil, transactionIDs: [Swift.Int64]? = nil, onlyIncludedAccounts: Swift.Bool? = nil, onlyIncludedTransactions: Swift.Bool? = nil, completion: @escaping (Swift.Result<(count: Swift.Int64, sum: Foundation.Decimal), Swift.Error>) -> Swift.Void)
  public func transactionCategory(context: CoreData.NSManagedObjectContext, transactionCategoryID: Swift.Int64) -> FrolloSDK.TransactionCategory?
  public func transactionCategories(context: CoreData.NSManagedObjectContext, defaultBudgetCategory: FrolloSDK.BudgetCategory? = nil, type: FrolloSDK.TransactionCategory.CategoryType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(TransactionCategory.transactionCategoryID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.TransactionCategory]?
  public func transactionCategoriesFetchedResultsController(context: CoreData.NSManagedObjectContext, defaultBudgetCategory: FrolloSDK.BudgetCategory? = nil, type: FrolloSDK.TransactionCategory.CategoryType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(TransactionCategory.transactionCategoryID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.TransactionCategory>?
  public func refreshTransactionCategories(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func transactionSuggestedTags(searchTerm: Swift.String, sort: FrolloSDK.Aggregation.SortType = .name, order: FrolloSDK.Aggregation.OrderType = .asc, completion: @escaping (Swift.Result<[FrolloSDK.SuggestedTag], Swift.Error>) -> Swift.Void)
  public func transactionUserTags(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Tag.name), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Tag]?
  public func transactionUserTags(context: CoreData.NSManagedObjectContext, including names: [Swift.String], sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Tag.name), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Tag]?
  public func transactionUserTags(context: CoreData.NSManagedObjectContext, excluding names: [Swift.String], sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Tag.name), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Tag]?
  public func refreshTransactionUserTags(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func transactionUserTagsFetchedResultsController(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Tag.name), ascending: true)]) -> CoreData.NSFetchedResultsController<FrolloSDK.Tag>?
  public func addTagToTransaction(transactionID: Swift.Int64, tagApplyAllPairs: [FrolloSDK.Aggregation.tagApplyAllPairs], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func removeTagFromTransaction(transactionID: Swift.Int64, tagApplyAllPairs: [(Swift.String, Swift.Bool)], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func listAllTagsForTransaction(transactionID: Swift.Int64, completion: @escaping (Swift.Result<[Swift.String], Swift.Error>) -> Swift.Void)
  public func merchant(context: CoreData.NSManagedObjectContext, merchantID: Swift.Int64) -> FrolloSDK.Merchant?
  public func merchants(context: CoreData.NSManagedObjectContext, type: FrolloSDK.Merchant.MerchantType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Merchant.merchantID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Merchant]?
  public func merchantsFetchedResultsController(context: CoreData.NSManagedObjectContext, type: FrolloSDK.Merchant.MerchantType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Merchant.merchantID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Merchant>?
  public func refreshMerchant(merchantID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshMerchantsWithCompletionHandler(merchantIDs: [Swift.Int64], before: Swift.Int64? = nil, after: Swift.Int64? = nil, size: Swift.Int? = 500, completion: FrolloSDK.FrolloSDKPaginatedCompletionHandler? = nil)
  public func refreshMerchants(batchSize: Swift.Int? = 500, merchantIDs: [Swift.Int64], completion: FrolloSDK.FrolloSDKPaginatedCompletionHandler? = nil)
  public func refreshCachedMerchants(count: Swift.Int? = nil, offset: Swift.Int = 0, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func searchMerchants(keyword: Swift.String, before: Swift.String? = nil, after: Swift.String? = nil, size: Swift.Int? = nil, completion: @escaping (Swift.Result<FrolloSDK.Aggregation.MerchantSearchResponse, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Payments {
  public static let paymentDateFormatter: Foundation.DateFormatter
  public func payAnyone(accountHolder: Swift.String, accountNumber: Swift.String, amount: Foundation.Decimal, bsb: Swift.String, description: Swift.String? = nil, paymentDate: Foundation.Date? = nil, reference: Swift.String? = nil, sourceAccountID: Swift.Int64, securityCode: Swift.String? = nil, completion: @escaping (Swift.Result<FrolloSDK.PayAnyoneResponse, Swift.Error>) -> Swift.Void)
  public func transferPayment(amount: Foundation.Decimal, description: Swift.String? = nil, destinationAccountID: Swift.Int64, paymentDate: Foundation.Date? = nil, sourceAccountID: Swift.Int64, securityCode: Swift.String? = nil, completion: @escaping (Swift.Result<FrolloSDK.PaymentTransferResponse, Swift.Error>) -> Swift.Void)
  public func bpayPayment(amount: Foundation.Decimal, billerCode: Swift.String, crn: Swift.String, paymentDate: Foundation.Date? = nil, reference: Swift.String? = nil, sourceAccountID: Swift.Int64, securityCode: Swift.String? = nil, completion: @escaping (Swift.Result<FrolloSDK.BPAYPaymentResponse, Swift.Error>) -> Swift.Void)
  public func payIDPayment(payID: Swift.String, type: FrolloSDK.PayIDContact.PayIDType, payIDName: Swift.String, amount: Foundation.Decimal, paymentDate: Foundation.Date = Date(), description: Swift.String? = nil, reference: Swift.String? = nil, sourceAccountID: Swift.Int64, securityCode: Swift.String? = nil, completion: @escaping (Swift.Result<FrolloSDK.PayIDPaymentResponse, Swift.Error>) -> Swift.Void)
  public func payAnyoneNPPPayment(accountHolder: Swift.String, accountNumber: Swift.String, amount: Foundation.Decimal, bsb: Swift.String, description: Swift.String? = nil, paymentDate: Foundation.Date = Date(), reference: Swift.String? = nil, sourceAccountID: Swift.Int64, securityCode: Swift.String? = nil, completion: @escaping (Swift.Result<FrolloSDK.PayAnyoneResponse, Swift.Error>) -> Swift.Void)
  public func verifyPayAnyone(accountHolder: Swift.String?, accountNumber: Swift.String?, bsb: Swift.String, completion: @escaping (Swift.Result<FrolloSDK.VerifyPayAnyoneResponse, Swift.Error>) -> Swift.Void)
  public func verifyPayID(payID: Swift.String, type: FrolloSDK.PayIDContact.PayIDType, completion: @escaping (Swift.Result<FrolloSDK.VerifyPayIDResponse, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension Budget {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Budget>
  @objc @NSManaged dynamic public var budgetID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCurrent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var typeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var typeValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frequencyRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currency: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodsCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadataRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periods: Swift.Set<FrolloSDK.BudgetPeriod>? {
    @objc get
    @objc set
  }
}
extension Budget {
  @objc(addPeriodsObject:) @NSManaged dynamic public func addToPeriods(_ value: FrolloSDK.BudgetPeriod)
  @objc(removePeriodsObject:) @NSManaged dynamic public func removeFromPeriods(_ value: FrolloSDK.BudgetPeriod)
  @objc(addPeriods:) @NSManaged dynamic public func addToPeriods(_ values: Swift.Set<FrolloSDK.BudgetPeriod>)
  @objc(removePeriods:) @NSManaged dynamic public func removeFromPeriods(_ values: Swift.Set<FrolloSDK.BudgetPeriod>)
}
public struct CDRProduct : Swift.Codable {
  public enum CDRProductCategory : Swift.String, Swift.Codable {
    case transactionAndSavingAccounts
    case termDeposits
    case travelCards
    case regulatedTrustAccounts
    case residentialMortgages
    case creditAndChargeCards
    case personalLoans
    case marginLoans
    case leases
    case tradeFinance
    case overdrafts
    case businessLoans
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let brand: Swift.String?
  public let brandName: Swift.String?
  public let externalID: Swift.Int64?
  public let feesURI: Swift.String?
  public let termsURI: Swift.String?
  public let id: Swift.Int64
  public let productDescription: Swift.String?
  public let productName: Swift.String?
  public let providerCategory: FrolloSDK.CDRProduct.CDRProductCategory?
  public let providerID: Swift.Int64
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Merchant {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Merchant>
  @objc @NSManaged dynamic public var merchantID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var merchantTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smallLogoURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bills: Swift.Set<FrolloSDK.Bill>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var historyReports: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentReports: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactions: Swift.Set<FrolloSDK.Transaction>? {
    @objc get
    @objc set
  }
}
extension Merchant {
  @objc(addBillsObject:) @NSManaged dynamic public func addToBills(_ value: FrolloSDK.Bill)
  @objc(removeBillsObject:) @NSManaged dynamic public func removeFromBills(_ value: FrolloSDK.Bill)
  @objc(addBills:) @NSManaged dynamic public func addToBills(_ values: Swift.Set<FrolloSDK.Bill>)
  @objc(removeBills:) @NSManaged dynamic public func removeFromBills(_ values: Swift.Set<FrolloSDK.Bill>)
}
extension Merchant {
  @objc(addTransactionsObject:) @NSManaged dynamic public func addToTransactions(_ value: FrolloSDK.Transaction)
  @objc(removeTransactionsObject:) @NSManaged dynamic public func removeFromTransactions(_ value: FrolloSDK.Transaction)
  @objc(addTransactions:) @NSManaged dynamic public func addToTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
  @objc(removeTransactions:) @NSManaged dynamic public func removeFromTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
}
extension Merchant {
  @objc(addHistoryReports:) @NSManaged dynamic public func addToHistoryReports(_ values: Foundation.NSSet)
  @objc(removeHistoryReports:) @NSManaged dynamic public func removeFromHistoryReports(_ values: Foundation.NSSet)
}
extension Merchant {
  @objc(addCurrentReports:) @NSManaged dynamic public func addToCurrentReports(_ values: Foundation.NSSet)
  @objc(removeCurrentReports:) @NSManaged dynamic public func removeFromCurrentReports(_ values: Foundation.NSSet)
}
@_hasMissingDesignatedInitializers public class Surveys {
  public func fetchSurvey(surveyKey: Swift.String, latest: Swift.Bool = false, completion: @escaping (Swift.Result<FrolloSDK.Survey, Swift.Error>) -> Swift.Void)
  public func submitSurvey(survey: FrolloSDK.Survey, completion: @escaping (Swift.Result<FrolloSDK.Survey, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension Goal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Goal>
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currency: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var details: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var estimatedEndDateString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var estimatedTargetAmount: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frequencyRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goalID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadataRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodCount: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targetAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targetRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periods: Swift.Set<FrolloSDK.GoalPeriod>? {
    @objc get
    @objc set
  }
}
extension Goal {
  @objc(addPeriodsObject:) @NSManaged dynamic public func addToPeriods(_ value: FrolloSDK.GoalPeriod)
  @objc(removePeriodsObject:) @NSManaged dynamic public func removeFromPeriods(_ value: FrolloSDK.GoalPeriod)
  @objc(addPeriods:) @NSManaged dynamic public func addToPeriods(_ values: Swift.Set<FrolloSDK.GoalPeriod>)
  @objc(removePeriods:) @NSManaged dynamic public func removeFromPeriods(_ values: Swift.Set<FrolloSDK.GoalPeriod>)
}
public struct VerifyPayAnyoneResponse : Swift.Codable {
  public let bsb: Swift.String?
  public let bsbName: Swift.String?
  public let accountNumber: Swift.String?
  public let accountHolder: Swift.String?
  public let valid: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Survey : Swift.Codable {
  final public let id: Swift.Int64
  final public let key: Swift.String
  final public let name: Swift.String?
  final public let questions: [FrolloSDK.Survey.Question]
  final public let displayText: Swift.String?
  final public let iconURL: Swift.String?
  final public let metadata: SwiftyJSON.JSON?
  @_hasMissingDesignatedInitializers public class Question : Swift.Codable {
    final public let id: Swift.Int64
    final public let type: FrolloSDK.Survey.Question.QuestionType
    final public let title: Swift.String
    final public let displayText: Swift.String?
    final public let iconURL: Swift.String?
    final public let questionOptional: Swift.Bool?
    public var answers: [FrolloSDK.Survey.Question.Answer]
    final public let metadata: SwiftyJSON.JSON?
    public enum QuestionType : Swift.String, Swift.Codable {
      case slider
      case multipleChoice
      case checkbox
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
    }
    @_hasMissingDesignatedInitializers public class Answer : Swift.Codable {
      final public let id: Swift.Int64
      final public let title: Swift.String?
      final public let displayText: Swift.String?
      final public let iconURL: Swift.String?
      public var value: Swift.String
      public var selected: Swift.Bool
      public var answerType: FrolloSDK.Survey.Question.Answer.AnswerType
      public enum AnswerType : Swift.String, Swift.Codable {
        case selection
        case freeform
        public typealias RawValue = Swift.String
        public init?(rawValue: Swift.String)
        public var rawValue: Swift.String {
          get
        }
      }
      @objc deinit
      required public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class BudgetPeriod : CoreData.NSManagedObject {
  public static let budgetPeriodDateFormatter: Foundation.DateFormatter
  public var endDate: Foundation.Date {
    get
    set
  }
  public var startDate: Foundation.Date {
    get
    set
  }
  public var trackingStatus: FrolloSDK.Budget.TrackingStatus? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class CDRConfiguration : CoreData.NSManagedObject {
  public struct SharingDuration : Swift.Codable {
    public let duration: Swift.Int64
    public let description: Swift.String
    public let imageURL: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public var sharingDurations: [FrolloSDK.CDRConfiguration.SharingDuration] {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserManagement {
  public func fetchUser(context: CoreData.NSManagedObjectContext) -> FrolloSDK.User?
  public func refreshUser(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func registerUser(firstName: Swift.String, lastName: Swift.String?, mobileNumber: Swift.String?, postcode: Swift.String?, dateOfBirth: Foundation.Date?, email: Swift.String, password: Swift.String, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func updateUser(securityCode: Swift.String? = nil, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func deleteUser(completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func migrateUser(password: Swift.String, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func changePassword(currentPassword: Swift.String?, newPassword: Swift.String, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func resetPassword(email: Swift.String, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func updateDeviceCompliance(_ compliant: Swift.Bool, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateDevice(compliant: Swift.Bool? = nil, notificationToken: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func requestNewOTPCodeForUser(method: FrolloSDK.User.OtpMethodType = .sms, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func fetchUnconfimedUserDetails(completion: @escaping (Swift.Result<FrolloSDK.APIUserDetailsConfirm, Swift.Error>) -> Swift.Void)
  public func confimUserDetails(mobileNumber: Swift.String, securityCode: Swift.String? = nil, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func sendLog(message: Swift.String, level: FrolloSDK.LogLevel, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func fetchPayIDs(completion: @escaping (Swift.Result<[FrolloSDK.PayIDResponse], Swift.Error>) -> Swift.Void)
  public func requestOTPForPayIDRegistration(payID: Swift.String, type: FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode, completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  public func registerPayID(accountID: Swift.Int64, payID: Swift.String, type: FrolloSDK.PayIDContact.PayIDType, trackingID: Swift.String, otpCode: Swift.String, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func removePayID(payID: Swift.String, type: FrolloSDK.PayIDContact.PayIDType, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func fetchPayIDs(for accountID: Swift.Int64, completion: @escaping (Swift.Result<[FrolloSDK.AccountPayIDResponse], Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Messages {
  public func message(context: CoreData.NSManagedObjectContext, messageID: Swift.Int64) -> FrolloSDK.Message?
  public func messages(context: CoreData.NSManagedObjectContext, contentType: FrolloSDK.Message.ContentType? = nil, messageTypes: [Swift.String]? = nil, unread: Swift.Bool? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Message.messageID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Message]?
  public func messagesCount(context: CoreData.NSManagedObjectContext, unread: Swift.Bool? = nil, messageTypes: [Swift.String]? = nil, filteredBy predicate: Foundation.NSPredicate? = nil) -> Swift.Int?
  public func messagesFetchedResultsController(context: CoreData.NSManagedObjectContext, contentType: FrolloSDK.Message.ContentType? = nil, messageTypes: [Swift.String]? = nil, unread: Swift.Bool? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Message.messageID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Message>?
  public func refreshMessages(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshMessage(messageID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateMessage(messageID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateMessage(messageID: Swift.Int64, read: Swift.Bool? = false, interacted: Swift.Bool? = false, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshUnreadMessages(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PayIDContact : FrolloSDK.Contact {
  public enum PayIDType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case phoneNumber
    case email
    case organisationID
    case abn
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.PayIDContact.PayIDType]
    public static var allCases: [FrolloSDK.PayIDContact.PayIDType] {
      get
    }
  }
  public var payIDType: FrolloSDK.PayIDContact.PayIDType {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct ProviderLoginFormViewModel {
  public struct Cell {
    public let fieldRowChoice: Swift.String
    public var rows: [FrolloSDK.ProviderLoginForm.Row]
    public var selectedRowID: Swift.String?
  }
  public let id: Swift.String?
  public let forgetPasswordURL: Swift.String?
  public let formType: FrolloSDK.ProviderLoginForm.FormType
  public let help: Swift.String?
  public let mfaInfoText: Swift.String?
  public let mfaTimeout: Swift.Int?
  public let mfaInfoTitle: Swift.String?
  public var cells: [FrolloSDK.ProviderLoginFormViewModel.Cell]
  public init(loginForm: FrolloSDK.ProviderLoginForm)
  public func dataModel() -> FrolloSDK.ProviderLoginForm
  public func validateMultipleChoice() -> (Swift.Bool, Swift.Error?)
}
@_hasMissingDesignatedInitializers public class SuggestedTag {
  final public let name: Swift.String
  final public let count: Swift.Int64?
  final public let lastUsedAt: Foundation.Date?
  final public let createdAt: Foundation.Date?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AccountBalanceTier : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KYC {
  public func getKYC(completion: @escaping (Swift.Result<FrolloSDK.UserKYC, Swift.Error>) -> Swift.Void)
  public func createKYC(userKYC: FrolloSDK.UserKYC, completion: @escaping (Swift.Result<FrolloSDK.UserKYC, Swift.Error>) -> Swift.Void)
  public func updateKYC(userKYC: FrolloSDK.UserKYC, completion: @escaping (Swift.Result<FrolloSDK.UserKYC, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayDays {
  public static let payDayUpdatedNotification: Foundation.Notification.Name
  public func payDay(context: CoreData.NSManagedObjectContext) -> FrolloSDK.PayDay?
  public func refreshPayDay(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updatePayDay(period: FrolloSDK.PayDay.Period, nextDate: Foundation.Date, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Message : CoreData.NSManagedObject {
  public enum ContentType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case html
    case image
    case text
    case video
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [FrolloSDK.Message.ContentType]
    public static var allCases: [FrolloSDK.Message.ContentType] {
      get
    }
  }
  public enum OpenMode : Swift.String, Swift.CaseIterable, Swift.Codable {
    case internalOpen
    case internalNavigation
    case internalSecure
    case external
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Message.OpenMode]
    public static var allCases: [FrolloSDK.Message.OpenMode] {
      get
    }
  }
  public var actionURL: Foundation.URL? {
    get
    set
  }
  public var contentType: FrolloSDK.Message.ContentType {
    get
    set
  }
  public var messageOpenMode: FrolloSDK.Message.OpenMode? {
    get
    set
  }
  public var messageTypes: [Swift.String] {
    get
    set
  }
  public var metadata: SwiftyJSON.JSON {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum APIErrorCode : Swift.String, Swift.Codable {
  case invalidValue
  case invalidLength
  case invalidAuthorisationHeader
  case invalidUserAgentHeader
  case invalidMustBeDifferent
  case invalidOverLimit
  case invalidCount
  case migrationFailed
  case aggregatorBadRequest
  case invalidAccessToken
  case invalidRefreshToken
  case invalidUsernamePassword
  case suspendedUser
  case suspendedDevice
  case accountLocked
  case unauthorised
  case notFound
  case alreadyExists
  case paymentOtherError
  case paymentProcessorError
  case paymentProcessorConnectivityError
  case paymentInsufficientFunds
  case paymentInvalidDate
  case paymentInvalidSourceAccount
  case paymentInvalidDestinationAccount
  case paymentAccountRestricted
  case paymentInvalidBPAY
  case paymentInvalidBillerCode
  case paymentInvalidCRN
  case paymentInvalidPayAnyone
  case paymentInvalidBSB
  case paymentInvalidAccount
  case paymentInvalidTransfer
  case aggregatorError
  case unknownServer
  case internalException
  case missingOTP
  case invalidOTP
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MessageImage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.MessageImage>
  @objc @NSManaged dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var width: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var urlString: Swift.String {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class Tag : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Goal : CoreData.NSManagedObject {
  public enum Frequency : Swift.String, Swift.Codable, Swift.CaseIterable {
    case annually
    case biannually
    case daily
    case fortnightly
    case fourWeekly
    case monthly
    case quarterly
    case singular
    case weekly
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Goal.Frequency]
    public static var allCases: [FrolloSDK.Goal.Frequency] {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case active
    case cancelled
    case completed
    case failed
    case finalising
    case unstarted
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [FrolloSDK.Goal.Status]
    public static var allCases: [FrolloSDK.Goal.Status] {
      get
    }
  }
  public enum Target : Swift.String, Swift.Codable, Swift.CaseIterable {
    case amount
    case date
    case openEnded
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Goal.Target]
    public static var allCases: [FrolloSDK.Goal.Target] {
      get
    }
  }
  public enum TrackingStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case above
    case below
    case equal
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [FrolloSDK.Goal.TrackingStatus]
    public static var allCases: [FrolloSDK.Goal.TrackingStatus] {
      get
    }
  }
  public enum TrackingType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case credit
    case debit
    case debitCredit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Goal.TrackingType]
    public static var allCases: [FrolloSDK.Goal.TrackingType] {
      get
    }
  }
  public static let goalDateFormatter: Foundation.DateFormatter
  public var currentPeriod: FrolloSDK.GoalPeriod? {
    get
  }
  public var endDate: Foundation.Date {
    get
    set
  }
  public var estimatedEndDate: Foundation.Date? {
    get
    set
  }
  public var frequency: FrolloSDK.Goal.Frequency {
    get
    set
  }
  public var imageURL: Foundation.URL? {
    get
    set
  }
  public var metadata: SwiftyJSON.JSON {
    get
    set
  }
  public var startDate: Foundation.Date {
    get
    set
  }
  public var status: FrolloSDK.Goal.Status {
    get
    set
  }
  public var target: FrolloSDK.Goal.Target {
    get
    set
  }
  public var trackingStatus: FrolloSDK.Goal.TrackingStatus {
    get
    set
  }
  public var trackingType: FrolloSDK.Goal.TrackingType {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers public class PayDay : CoreData.NSManagedObject {
  public enum Period : Swift.String, Swift.Codable, Swift.CaseIterable {
    case fortnightly
    case fourWeekly
    case irregular
    case monthly
    case unknown
    case weekly
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.PayDay.Period]
    public static var allCases: [FrolloSDK.PayDay.Period] {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case calculating
    case confirmed
    case estimated
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.PayDay.Status]
    public static var allCases: [FrolloSDK.PayDay.Status] {
      get
    }
  }
  public static let payDayDateFormatter: Foundation.DateFormatter
  public var lastDate: Foundation.Date? {
    get
    set
  }
  public var nextDate: Foundation.Date? {
    get
    set
  }
  public var period: FrolloSDK.PayDay.Period {
    get
    set
  }
  public var status: FrolloSDK.PayDay.Status {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct APIUserPayIDOTPRequest : Swift.Codable {
  public enum PayIDOtpRequestMode : Swift.String, Swift.Codable, Swift.CaseIterable {
    case sms
    case call
    case email
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode]
    public static var allCases: [FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode] {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class MessageHTML : FrolloSDK.Message {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension InternationalContact {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.InternationalContact>
  @objc @NSManaged dynamic public var internationalContactName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var internationalContactCountry: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var internationalContactMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var internationalBankCountry: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var internationalAccountNumber: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var internationalBankAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bic: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fedwireNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var chipNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var routingNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var legalEntityId: Swift.String? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class Bills {
  public func bill(context: CoreData.NSManagedObjectContext, billID: Swift.Int64) -> FrolloSDK.Bill?
  public func bills(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Bill.Frequency? = nil, paymentStatus: FrolloSDK.Bill.PaymentStatus? = nil, status: FrolloSDK.Bill.Status? = nil, type: FrolloSDK.Bill.BillType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Bill.billID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Bill]?
  public func billsFetchedResultsController(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Bill.Frequency? = nil, paymentStatus: FrolloSDK.Bill.PaymentStatus? = nil, status: FrolloSDK.Bill.Status? = nil, type: FrolloSDK.Bill.BillType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Bill.billID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Bill>?
  public func createBill(transactionID: Swift.Int64, dueAmount: Foundation.Decimal? = nil, frequency: FrolloSDK.Bill.Frequency, nextPaymentDate: Foundation.Date, name: Swift.String? = nil, notes: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createBill(accountID: Swift.Int64, dueAmount: Foundation.Decimal, frequency: FrolloSDK.Bill.Frequency, nextPaymentDate: Foundation.Date, name: Swift.String, notes: Swift.String? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func deleteBill(billID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBills(completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBill(billID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateBill(billID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func billPayment(context: CoreData.NSManagedObjectContext, billPaymentID: Swift.Int64) -> FrolloSDK.BillPayment?
  public func billPayments(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Bill.Frequency? = nil, status: FrolloSDK.Bill.PaymentStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(BillPayment.billPaymentID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.BillPayment]?
  public func billPaymentsFetchedResultsController(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Bill.Frequency? = nil, status: FrolloSDK.Bill.PaymentStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(BillPayment.billPaymentID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.BillPayment>?
  public func deleteBillPayment(billPaymentID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBillPayments(from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBillPayment(billPaymentID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateBillPayment(billPaymentID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
extension User {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.User>
  @objc @NSManaged dynamic public var attributionAdGroup: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributionCampaign: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributionCreative: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributionNetwork: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateOfBirth: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var email: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var emailVerified: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var facebookID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var featuresRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var firstName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var foreignTax: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var genderRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var householdSize: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var householdTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var industryRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mailingAddressRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mobileNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var occupationRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var primaryCurrency: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var registerStepsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var taxResidency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tfn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var validPassword: Swift.Bool {
    @objc get
    @objc set
  }
}
public enum ReportGrouping : Swift.String, Swift.Codable, Swift.CaseIterable {
  case budgetCategory
  case merchant
  case transactionCategory
  case tag
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [FrolloSDK.ReportGrouping]
  public static var allCases: [FrolloSDK.ReportGrouping] {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Card : CoreData.NSManagedObject {
  public enum CardStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case active
    case pending
    case locked
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Card.CardStatus]
    public static var allCases: [FrolloSDK.Card.CardStatus] {
      get
    }
  }
  public enum CardDesignType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case `default`
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Card.CardDesignType]
    public static var allCases: [FrolloSDK.Card.CardDesignType] {
      get
    }
  }
  public enum CardIssuer : Swift.String, Swift.Codable, Swift.CaseIterable {
    case visa
    case mastercard
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Card.CardIssuer]
    public static var allCases: [FrolloSDK.Card.CardIssuer] {
      get
    }
  }
  public enum CardType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case credit
    case debit
    case prepaid
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.Card.CardType]
    public static var allCases: [FrolloSDK.Card.CardType] {
      get
    }
  }
  public static let cardDateFormatter: Foundation.DateFormatter
  public var cardStatus: FrolloSDK.Card.CardStatus {
    get
    set
  }
  public var cardDesignType: FrolloSDK.Card.CardDesignType {
    get
    set
  }
  public var createdDate: Foundation.Date {
    get
    set
  }
  public var cardIssuer: FrolloSDK.Card.CardIssuer? {
    get
    set
  }
  public var cardType: FrolloSDK.Card.CardType? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct CDRPermission : Swift.Codable {
  public struct Detail : Swift.Codable {
    public let id: Swift.String
    public let description: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public let id: Swift.String
  public let title: Swift.String
  public let description: Swift.String
  public let required: Swift.Bool
  public let details: [FrolloSDK.CDRPermission.Detail]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class OAuth2Error : FrolloSDK.FrolloSDKError {
  public enum OAuth2ErrorType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case accessDenied
    case clientError
    case invalidClient
    case invalidClientMetadata
    case invalidGrant
    case invalidRedirectURI
    case invalidRequest
    case invalidScope
    case unauthorizedClient
    case unsupportedGrantType
    case unsupportedResponseType
    case browserError
    case networkError
    case serverError
    case userCancelled
    case otherAuthorization
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [FrolloSDK.OAuth2Error.OAuth2ErrorType]
    public static var allCases: [FrolloSDK.OAuth2Error.OAuth2ErrorType] {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var type: FrolloSDK.OAuth2Error.OAuth2ErrorType
  public var systemError: Swift.Error?
  @objc deinit
}
extension MessageHTML {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.MessageHTML>
  @objc @NSManaged dynamic public var footer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var header: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var main: Swift.String {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class PayAnyoneContact : FrolloSDK.Contact {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MessageText : FrolloSDK.Message {
  public var imageURL: Foundation.URL? {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Message {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Message>
  @objc @NSManaged dynamic public var messageID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userEventID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var placement: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var persists: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var read: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var interacted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contentTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var typesRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var actionTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var actionURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openModeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoDismiss: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metaDataRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
}
extension Provider {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Provider>
  @objc @NSManaged dynamic public var authTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var baseURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerBank: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerBill: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerCreditCard: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerCreditScore: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerInsurance: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerInvestment: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerLoan: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerRealEstate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerReward: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var containerUnknown: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var encryptionAlias: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var encryptionPublicKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var encryptionTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var forgotPasswordURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var helpMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var largeLogoURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var loginFormRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var loginHelpMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var loginURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mfaTypeRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var oAuthSite: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var popular: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productsAvailable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var smallLogoURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var permissionObjectsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var aggregatorTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccounts: Swift.Set<FrolloSDK.ProviderAccount>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var consents: Swift.Set<FrolloSDK.Consent>? {
    @objc get
    @objc set
  }
}
extension Provider {
  @objc(addProviderAccountsObject:) @NSManaged dynamic public func addToProviderAccounts(_ value: FrolloSDK.ProviderAccount)
  @objc(removeProviderAccountsObject:) @NSManaged dynamic public func removeFromProviderAccounts(_ value: FrolloSDK.ProviderAccount)
  @objc(addProviderAccounts:) @NSManaged dynamic public func addToProviderAccounts(_ values: Swift.Set<FrolloSDK.ProviderAccount>)
  @objc(removeProviderAccounts:) @NSManaged dynamic public func removeFromProviderAccounts(_ values: Swift.Set<FrolloSDK.ProviderAccount>)
}
extension Provider {
  @objc(addConsentsObject:) @NSManaged dynamic public func addToConsents(_ value: FrolloSDK.Consent)
  @objc(removeConsentsObject:) @NSManaged dynamic public func removeFromConsents(_ value: FrolloSDK.Consent)
  @objc(addConsents:) @NSManaged dynamic public func addToConsents(_ values: Swift.Set<FrolloSDK.Consent>)
  @objc(removeConsents:) @NSManaged dynamic public func removeFromConsents(_ values: Swift.Set<FrolloSDK.Consent>)
}
@objc @_inheritsConvenienceInitializers public class TransactionCategory : CoreData.NSManagedObject {
  public enum CategoryType : Swift.String, Swift.Codable {
    case creditScore
    case deferredCompensation
    case expense
    case income
    case transfer
    case uncategorize
    case unknown
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public var categoryType: FrolloSDK.TransactionCategory.CategoryType {
    get
    set
  }
  public var defaultBudgetCategory: FrolloSDK.BudgetCategory {
    get
    set
  }
  public var iconURL: Foundation.URL? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension PayAnyoneContact {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.PayAnyoneContact>
  @objc @NSManaged dynamic public var accountHolder: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bsb: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountNumber: Swift.String {
    @objc get
    @objc set
  }
}
extension PayIDContact {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.PayIDContact>
  @objc @NSManaged dynamic public var payID: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var payIDName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var payIDTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class Events {
  public func triggerEvent(_ eventName: Swift.String, after delay: Swift.Int64? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.Codable {
  case debug
  case error
  case info
  case off
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension MessageVideo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.MessageVideo>
  @objc @NSManaged dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var width: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var muted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoplay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoplayCellular: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconURLString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var urlString: Swift.String {
    @objc get
    @objc set
  }
}
public struct FrolloSDKConfiguration {
  public enum AuthenticationType {
    case custom(authenticationDataSource: FrolloSDK.AuthenticationDataSource, authenticationDelegate: FrolloSDK.AuthenticationDelegate)
    case oAuth2(redirectURL: Foundation.URL, authorizationEndpoint: Foundation.URL, tokenEndpoint: Foundation.URL, revokeTokenEndpoint: Foundation.URL?)
  }
  public var logLevel: FrolloSDK.LogLevel
  public var publicKeyPinningEnabled: Swift.Bool
  public var targetName: Swift.String?
  public init(authenticationType: FrolloSDK.FrolloSDKConfiguration.AuthenticationType, clientID: Swift.String, dataDirectory: Foundation.URL = Frollo.defaultDataFolderURL, serverEndpoint: Foundation.URL)
}
extension BPAYContact {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.BPAYContact>
  @objc @NSManaged dynamic public var billerCode: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var crn: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var billerName: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var crnTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class MessageImage : FrolloSDK.Message {
  public var url: Foundation.URL {
    get
    set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CDRProductInformation : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct APIUserDetailsConfirm : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension GoalPeriod {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.GoalPeriod>
  @objc @NSManaged dynamic public var goalPeriodID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goalID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDateString: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var index: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targetAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requiredAmount: Foundation.NSDecimalNumber {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trackingStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goal: FrolloSDK.Goal? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class Goals {
  public func goal(context: CoreData.NSManagedObjectContext, goalID: Swift.Int64) -> FrolloSDK.Goal?
  public func goals(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Goal.Frequency? = nil, status: FrolloSDK.Goal.Status? = nil, target: FrolloSDK.Goal.Target? = nil, trackingStatus: FrolloSDK.Goal.TrackingStatus? = nil, trackingType: FrolloSDK.Goal.TrackingType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Goal.goalID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Goal]?
  public func goalsFetchedResultsController(context: CoreData.NSManagedObjectContext, frequency: FrolloSDK.Goal.Frequency? = nil, status: FrolloSDK.Goal.Status? = nil, target: FrolloSDK.Goal.Target? = nil, trackingStatus: FrolloSDK.Goal.TrackingStatus? = nil, trackingType: FrolloSDK.Goal.TrackingType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Goal.goalID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Goal>?
  public func refreshGoal(goalID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshGoals(status: FrolloSDK.Goal.Status? = nil, trackingStatus: FrolloSDK.Goal.TrackingStatus? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createGoal(name: Swift.String, description: Swift.String? = nil, imageURL: Foundation.URL? = nil, target: FrolloSDK.Goal.Target, trackingType: FrolloSDK.Goal.TrackingType, frequency: FrolloSDK.Goal.Frequency, startDate: Foundation.Date? = nil, endDate: Foundation.Date?, periodAmount: Foundation.Decimal?, startAmount: Foundation.Decimal = 0, targetAmount: Foundation.Decimal?, accountID: Swift.Int64, metadata: SwiftyJSON.JSON = [:], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func deleteGoal(goalID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateGoal(goalID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func goalPeriod(context: CoreData.NSManagedObjectContext, goalPeriodID: Swift.Int64) -> FrolloSDK.GoalPeriod?
  public func goalPeriods(context: CoreData.NSManagedObjectContext, trackingStatus: FrolloSDK.Goal.TrackingStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(GoalPeriod.goalPeriodID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.GoalPeriod]?
  public func goalPeriodsFetchedResultsController(context: CoreData.NSManagedObjectContext, trackingStatus: FrolloSDK.Goal.TrackingStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(GoalPeriod.goalPeriodID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.GoalPeriod>?
  public func refreshGoalPeriod(goalID: Swift.Int64, goalPeriodID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshGoalPeriods(goalID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
extension Account {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Account>
  @objc @NSManaged dynamic public var accountHolderName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountSubTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountTypeRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var amountDue: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var amountDueCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var apr: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableBalance: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableBalanceCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableCash: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableCashCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableCredit: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var availableCreditCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var balanceDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bsb: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classificationRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentBalance: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentBalanceCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dueDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var externalID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var favourite: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var featuresRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goalIDsRawValue: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var included: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var interestRate: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastPaymentAmount: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastPaymentAmountCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastPaymentDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastRefreshed: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimumAmountDue: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimumAmountDueCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nextRefresh: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nickName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productDetailsPageURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productsAvailable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccountID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshAdditionalStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshStatusRawValue: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var refreshSubStatusRawValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalCashLimit: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalCashLimitCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalCreditLine: Foundation.NSDecimalNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalCreditLineCurrency: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var balanceTiers: Swift.Set<FrolloSDK.AccountBalanceTier>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bills: Swift.Set<FrolloSDK.Bill>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var goals: Swift.Set<FrolloSDK.Goal>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productInformations: Swift.Set<FrolloSDK.CDRProductInformation>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var providerAccount: FrolloSDK.ProviderAccount? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var reports: Swift.Set<FrolloSDK.ReportAccountBalance>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transactions: Swift.Set<FrolloSDK.Transaction>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cards: Swift.Set<FrolloSDK.Card>? {
    @objc get
    @objc set
  }
}
extension Account {
  @objc(addBalanceTiersObject:) @NSManaged dynamic public func addToBalanceTiers(_ value: FrolloSDK.AccountBalanceTier)
  @objc(removeBalanceTiersObject:) @NSManaged dynamic public func removeFromBalanceTiers(_ value: FrolloSDK.AccountBalanceTier)
  @objc(addBalanceTiers:) @NSManaged dynamic public func addToBalanceTiers(_ values: Swift.Set<FrolloSDK.AccountBalanceTier>)
  @objc(removeBalanceTiers:) @NSManaged dynamic public func removeFromBalanceTiers(_ values: Swift.Set<FrolloSDK.AccountBalanceTier>)
}
extension Account {
  @objc(addBillsObject:) @NSManaged dynamic public func addToBills(_ value: FrolloSDK.Bill)
  @objc(removeBillsObject:) @NSManaged dynamic public func removeFromBills(_ value: FrolloSDK.Bill)
  @objc(addBills:) @NSManaged dynamic public func addToBills(_ values: Swift.Set<FrolloSDK.Bill>)
  @objc(removeBills:) @NSManaged dynamic public func removeFromBills(_ values: Swift.Set<FrolloSDK.Bill>)
}
extension Account {
  @objc(addGoalsObject:) @NSManaged dynamic public func addToGoals(_ value: FrolloSDK.Goal)
  @objc(removeGoalsObject:) @NSManaged dynamic public func removeFromGoals(_ value: FrolloSDK.Goal)
  @objc(addGoals:) @NSManaged dynamic public func addToGoals(_ values: Swift.Set<FrolloSDK.Goal>)
  @objc(removeGoals:) @NSManaged dynamic public func removeFromGoals(_ values: Swift.Set<FrolloSDK.Goal>)
}
extension Account {
  @objc(addReportsObject:) @NSManaged dynamic public func addToReports(_ value: FrolloSDK.ReportAccountBalance)
  @objc(removeReportsObject:) @NSManaged dynamic public func removeFromReports(_ value: FrolloSDK.ReportAccountBalance)
  @objc(addReports:) @NSManaged dynamic public func addToReports(_ values: Foundation.NSSet)
  @objc(removeReports:) @NSManaged dynamic public func removeFromReports(_ values: Foundation.NSSet)
}
extension Account {
  @objc(addTransactionsObject:) @NSManaged dynamic public func addToTransactions(_ value: FrolloSDK.Transaction)
  @objc(removeTransactionsObject:) @NSManaged dynamic public func removeFromTransactions(_ value: FrolloSDK.Transaction)
  @objc(addTransactions:) @NSManaged dynamic public func addToTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
  @objc(removeTransactions:) @NSManaged dynamic public func removeFromTransactions(_ values: Swift.Set<FrolloSDK.Transaction>)
}
extension Account {
  @objc(addProductInformationsObject:) @NSManaged dynamic public func addToProductInformations(_ value: FrolloSDK.CDRProductInformation)
  @objc(removeProductInformationsObject:) @NSManaged dynamic public func removeFromProductInformations(_ value: FrolloSDK.CDRProductInformation)
  @objc(addProductInformations:) @NSManaged dynamic public func addToProductInformations(_ values: Swift.Set<FrolloSDK.CDRProductInformation>)
  @objc(removeProductInformations:) @NSManaged dynamic public func removeFromProductInformations(_ values: Swift.Set<FrolloSDK.CDRProductInformation>)
}
extension Account {
  @objc(addCardsObject:) @NSManaged dynamic public func addToCards(_ value: FrolloSDK.Card)
  @objc(removeCardsObject:) @NSManaged dynamic public func removeFromCards(_ value: FrolloSDK.Card)
  @objc(addCards:) @NSManaged dynamic public func addToCards(_ values: Swift.Set<FrolloSDK.Card>)
  @objc(removeCards:) @NSManaged dynamic public func removeFromCards(_ values: Swift.Set<FrolloSDK.Card>)
}
@_hasMissingDesignatedInitializers public class Reports {
  public func accountBalanceReports(context: CoreData.NSManagedObjectContext, from fromDate: Foundation.Date, to toDate: Foundation.Date, period: FrolloSDK.ReportAccountBalance.Period, accountID: Swift.Int64? = nil, accountType: FrolloSDK.Account.AccountType? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(ReportAccountBalance.dateString), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.ReportAccountBalance]?
  public func accountBalanceReports(context: CoreData.NSManagedObjectContext, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(ReportAccountBalance.dateString), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.ReportAccountBalance]?
  public func refreshAccountBalanceReports(period: FrolloSDK.ReportAccountBalance.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, accountID: Swift.Int64? = nil, accountType: FrolloSDK.Account.AccountType? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func fetchTransactionReports<T>(filtering: FrolloSDK.TransactionReportFilter, grouping: T.Type, period: FrolloSDK.Reports.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: @escaping (Swift.Result<[FrolloSDK.ReportResponse<T>], Swift.Error>) -> Swift.Void) where T : FrolloSDK.Reportable
  public func fetchTransactionCategoryReports(_ id: Swift.Int64? = nil, period: FrolloSDK.Reports.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: @escaping (Swift.Result<[FrolloSDK.ReportResponse<FrolloSDK.TransactionCategoryGroupReport>], Swift.Error>) -> Swift.Void)
  public func fetchTransactionMerchantReports(_ id: Swift.Int64? = nil, period: FrolloSDK.Reports.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: @escaping (Swift.Result<[FrolloSDK.ReportResponse<FrolloSDK.MerchantGroupReport>], Swift.Error>) -> Swift.Void)
  public func fetchTransactionBudgetCategoryReports(_ budgetCategory: FrolloSDK.BudgetCategory? = nil, period: FrolloSDK.Reports.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: @escaping (Swift.Result<[FrolloSDK.ReportResponse<FrolloSDK.BudgetCategoryGroupReport>], Swift.Error>) -> Swift.Void)
  public func fetchTransactionTagReports(_ name: Swift.String? = nil, period: FrolloSDK.Reports.Period, from fromDate: Foundation.Date, to toDate: Foundation.Date, completion: @escaping (Swift.Result<[FrolloSDK.ReportResponse<FrolloSDK.TagGroupReport>], Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct PayIDPaymentResponse : Swift.Codable {
  public let amount: Swift.String
  public let description: Swift.String?
  public let reference: Swift.String?
  public let destinationAccountHolder: Swift.String
  public let paymentDate: Swift.String
  public let sourceAccountID: Swift.Int64
  public let sourceAccountName: Swift.String
  public let transactionReference: Swift.String
  public let status: Swift.String
  public let isDuplicate: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class APIError : FrolloSDK.FrolloSDKError {
  public enum APIErrorType : Swift.String {
    case deprecated
    case maintenance
    case notImplemented
    case rateLimit
    case serverError
    case badRequest
    case aggregatorBadRequest
    case unauthorised
    case notFound
    case alreadyExists
    case passwordMustBeDifferent
    case invalidAccessToken
    case invalidRefreshToken
    case invalidUsernamePassword
    case suspendedDevice
    case suspendedUser
    case accountLocked
    case otherAuthorisation
    case migrationFailed
    case unknown
    case securityCodeRequired
    case invalidSecurityCode
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var type: FrolloSDK.APIError.APIErrorType
  public var errorCode: FrolloSDK.APIErrorCode?
  public var message: Swift.String?
  public var statusCode: Swift.Int
  @objc deinit
}
public protocol FrolloSDKDelegate : AnyObject {
  func eventTriggered(eventName: Swift.String)
  func messageReceived(_ messageID: Swift.Int64)
}
@_hasMissingDesignatedInitializers public class Budgets {
  public static let currentBudgetPeriodReadyNotification: Foundation.Notification.Name
  public func budget(context: CoreData.NSManagedObjectContext, budgetID: Swift.Int64) -> FrolloSDK.Budget?
  public func budgets(context: CoreData.NSManagedObjectContext, current: Swift.Bool? = nil, budgetType: FrolloSDK.Budget.BudgetType? = nil, typeValue: Swift.String? = nil, frequency: FrolloSDK.Budget.Frequency? = nil, status: FrolloSDK.Budget.Status? = nil, trackingStatus: FrolloSDK.Budget.TrackingStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Budget.budgetID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.Budget]?
  public func budgetsFetchedResultsController(context: CoreData.NSManagedObjectContext, current: Swift.Bool? = nil, budgetType: FrolloSDK.Budget.BudgetType? = nil, typeValue: Swift.String? = nil, frequency: FrolloSDK.Budget.Frequency? = nil, status: FrolloSDK.Budget.Status? = nil, trackingStatus: FrolloSDK.Budget.TrackingStatus? = nil, trackingType: FrolloSDK.Budget.TrackingType, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(Budget.budgetID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.Budget>?
  public func refreshBudget(budgetID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBudgets(current: Swift.Bool? = nil, budgetType: FrolloSDK.Budget.BudgetType? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createAccountBudget(accountID: Swift.Int64, frequency: FrolloSDK.Budget.Frequency, periodAmount: Foundation.Decimal, imageURL: Swift.String? = nil, startDate: Swift.String? = nil, metadata: SwiftyJSON.JSON = [:], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createBudgetCategoryBudget(budgetCategory: FrolloSDK.BudgetCategory, frequency: FrolloSDK.Budget.Frequency, periodAmount: Foundation.Decimal, imageURL: Swift.String? = nil, startDate: Swift.String? = nil, metadata: SwiftyJSON.JSON = [:], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createCategoryBudget(categoryID: Swift.Int64, frequency: FrolloSDK.Budget.Frequency, periodAmount: Foundation.Decimal, imageURL: Swift.String? = nil, startDate: Swift.String? = nil, metadata: SwiftyJSON.JSON = [:], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func createMerchantBudget(merchantID: Swift.Int64, frequency: FrolloSDK.Budget.Frequency, periodAmount: Foundation.Decimal, imageURL: Swift.String? = nil, startDate: Swift.String? = nil, metadata: SwiftyJSON.JSON = [:], completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func deleteBudget(budgetID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func updateBudget(budgetID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func budgetPeriod(context: CoreData.NSManagedObjectContext, budgetPeriodID: Swift.Int64) -> FrolloSDK.BudgetPeriod?
  public func budgetPeriods(context: CoreData.NSManagedObjectContext, budgetID: Swift.Int64? = nil, trackingStatus: FrolloSDK.Budget.TrackingStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(BudgetPeriod.budgetPeriodID), ascending: true)], limit: Swift.Int? = nil) -> [FrolloSDK.BudgetPeriod]?
  public func budgetPeriodsFetchedResultsController(context: CoreData.NSManagedObjectContext, budgetID: Swift.Int64? = nil, trackingStatus: FrolloSDK.Budget.TrackingStatus? = nil, filteredBy predicate: Foundation.NSPredicate? = nil, sortedBy sortDescriptors: [Foundation.NSSortDescriptor]? = [NSSortDescriptor(key: #keyPath(BudgetPeriod.budgetPeriodID), ascending: true)], limit: Swift.Int? = nil) -> CoreData.NSFetchedResultsController<FrolloSDK.BudgetPeriod>?
  public func refreshBudgetPeriod(budgetID: Swift.Int64, budgetPeriodID: Swift.Int64, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  public func refreshBudgetPeriods(budgetID: Swift.Int64, from fromDate: Foundation.Date? = nil, to toDate: Foundation.Date? = nil, completion: FrolloSDK.FrolloSDKCompletionHandler? = nil)
  @objc deinit
}
public struct NotificationPayload : Swift.Codable {
  public struct ApplePayload : Swift.Codable {
    public struct Alert : Swift.Codable {
      public let body: Swift.String?
      public let launchImage: Swift.String?
      public let locArgs: [Swift.String]?
      public let locKey: Swift.String?
      public let subtitle: Swift.String?
      public let subtitleLocArgs: [Swift.String]?
      public let subtitleLocKey: Swift.String?
      public let title: Swift.String?
      public let titleLocArgs: [Swift.String]?
      public let titleLocKey: Swift.String?
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    public struct Sound : Swift.Codable {
      public let critical: Swift.Int?
      public let name: Swift.String?
      public let volume: Swift.Double?
      public init(from decoder: Swift.Decoder) throws
      public func encode(to encoder: Swift.Encoder) throws
    }
    public let alert: FrolloSDK.NotificationPayload.ApplePayload.Alert?
    public let badge: Swift.Int?
    public let category: Swift.String?
    public let contentAvailable: Swift.Int?
    public let mutableContent: Swift.Int?
    public let sound: FrolloSDK.NotificationPayload.ApplePayload.Sound?
    public let threadID: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public let aps: FrolloSDK.NotificationPayload.ApplePayload?
  public let event: Swift.String?
  public let link: Swift.String?
  public let transactionIDs: [Swift.Int64]?
  public let userEventID: Swift.Int64?
  public let userMessageID: Swift.Int64?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class OAuth2Authentication : FrolloSDK.AuthenticationDataSource, FrolloSDK.AuthenticationDelegate {
  public static let authenticationChangedNotification: Foundation.Notification.Name
  public static let authenticationStatusKey: Swift.String
  public enum AuthenticationStatus {
    case authenticated
    case loggedOut
    public static func == (a: FrolloSDK.OAuth2Authentication.AuthenticationStatus, b: FrolloSDK.OAuth2Authentication.AuthenticationStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var loggedIn: Swift.Bool {
    get
  }
  public var accessToken: FrolloSDK.AccessToken?
  public var preemptiveRefreshTime: Foundation.TimeInterval?
  public func loginUserUsingWeb(presenting presentingViewController: UIKit.UIViewController, scopes: [Swift.String], additionalParameters: [Swift.String : Swift.String]? = nil, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func loginUser(email: Swift.String, password: Swift.String, scopes: [Swift.String], completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func resumeAuthentication(url: Foundation.URL) -> Swift.Bool
  public func exchangeLegacyToken(legacyRefreshToken: Swift.String? = nil, completion: @escaping FrolloSDK.FrolloSDKCompletionHandler)
  public func refreshTokens(completion: FrolloSDK.FrolloSDKCompletionHandler?)
  public func logout()
  public func reset()
  public func accessTokenExpired(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func accessTokenInvalid()
  @objc deinit
}
extension Tag {
  @nonobjc public class func tagFetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.Tag>
  @objc @NSManaged dynamic public var name: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var count: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastUsedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension CDRProductInformation {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FrolloSDK.CDRProductInformation>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var account: FrolloSDK.Account? {
    @objc get
    @objc set
  }
}
extension FrolloSDK.Bill.BillType : Swift.Equatable {}
extension FrolloSDK.Bill.BillType : Swift.Hashable {}
extension FrolloSDK.Bill.BillType : Swift.RawRepresentable {}
extension FrolloSDK.Bill.Frequency : Swift.Equatable {}
extension FrolloSDK.Bill.Frequency : Swift.Hashable {}
extension FrolloSDK.Bill.Frequency : Swift.RawRepresentable {}
extension FrolloSDK.Bill.PaymentStatus : Swift.Equatable {}
extension FrolloSDK.Bill.PaymentStatus : Swift.Hashable {}
extension FrolloSDK.Bill.PaymentStatus : Swift.RawRepresentable {}
extension FrolloSDK.Bill.Status : Swift.Equatable {}
extension FrolloSDK.Bill.Status : Swift.Hashable {}
extension FrolloSDK.Bill.Status : Swift.RawRepresentable {}
extension FrolloSDK.DataError.DataErrorType : Swift.Equatable {}
extension FrolloSDK.DataError.DataErrorType : Swift.Hashable {}
extension FrolloSDK.DataError.DataErrorType : Swift.RawRepresentable {}
extension FrolloSDK.DataError.DataErrorSubType : Swift.Equatable {}
extension FrolloSDK.DataError.DataErrorSubType : Swift.Hashable {}
extension FrolloSDK.DataError.DataErrorSubType : Swift.RawRepresentable {}
extension FrolloSDK.Transaction.BaseType : Swift.Equatable {}
extension FrolloSDK.Transaction.BaseType : Swift.Hashable {}
extension FrolloSDK.Transaction.BaseType : Swift.RawRepresentable {}
extension FrolloSDK.Transaction.Status : Swift.Equatable {}
extension FrolloSDK.Transaction.Status : Swift.Hashable {}
extension FrolloSDK.Transaction.Status : Swift.RawRepresentable {}
extension FrolloSDK.ProviderLoginForm.FieldType : Swift.Equatable {}
extension FrolloSDK.ProviderLoginForm.FieldType : Swift.Hashable {}
extension FrolloSDK.ProviderLoginForm.FieldType : Swift.RawRepresentable {}
extension FrolloSDK.ProviderLoginForm.FormType : Swift.Equatable {}
extension FrolloSDK.ProviderLoginForm.FormType : Swift.Hashable {}
extension FrolloSDK.ProviderLoginForm.FormType : Swift.RawRepresentable {}
extension FrolloSDK.BPAYContact.CRNType : Swift.Equatable {}
extension FrolloSDK.BPAYContact.CRNType : Swift.Hashable {}
extension FrolloSDK.BPAYContact.CRNType : Swift.RawRepresentable {}
extension FrolloSDK.AccountRefreshStatus : Swift.Equatable {}
extension FrolloSDK.AccountRefreshStatus : Swift.Hashable {}
extension FrolloSDK.AccountRefreshStatus : Swift.RawRepresentable {}
extension FrolloSDK.AccountRefreshSubStatus : Swift.Equatable {}
extension FrolloSDK.AccountRefreshSubStatus : Swift.Hashable {}
extension FrolloSDK.AccountRefreshSubStatus : Swift.RawRepresentable {}
extension FrolloSDK.AccountRefreshAdditionalStatus : Swift.Equatable {}
extension FrolloSDK.AccountRefreshAdditionalStatus : Swift.Hashable {}
extension FrolloSDK.AccountRefreshAdditionalStatus : Swift.RawRepresentable {}
extension FrolloSDK.Merchant.MerchantType : Swift.Equatable {}
extension FrolloSDK.Merchant.MerchantType : Swift.Hashable {}
extension FrolloSDK.Merchant.MerchantType : Swift.RawRepresentable {}
extension FrolloSDK.LoginFormError.LoginFormErrorType : Swift.Equatable {}
extension FrolloSDK.LoginFormError.LoginFormErrorType : Swift.Hashable {}
extension FrolloSDK.LoginFormError.LoginFormErrorType : Swift.RawRepresentable {}
extension FrolloSDK.PayIDResponse.PayIDStatus : Swift.Equatable {}
extension FrolloSDK.PayIDResponse.PayIDStatus : Swift.Hashable {}
extension FrolloSDK.PayIDResponse.PayIDStatus : Swift.RawRepresentable {}
extension FrolloSDK.User.Gender : Swift.Equatable {}
extension FrolloSDK.User.Gender : Swift.Hashable {}
extension FrolloSDK.User.Gender : Swift.RawRepresentable {}
extension FrolloSDK.User.HouseholdType : Swift.Equatable {}
extension FrolloSDK.User.HouseholdType : Swift.Hashable {}
extension FrolloSDK.User.HouseholdType : Swift.RawRepresentable {}
extension FrolloSDK.User.Industry : Swift.Equatable {}
extension FrolloSDK.User.Industry : Swift.Hashable {}
extension FrolloSDK.User.Industry : Swift.RawRepresentable {}
extension FrolloSDK.User.Occupation : Swift.Equatable {}
extension FrolloSDK.User.Occupation : Swift.Hashable {}
extension FrolloSDK.User.Occupation : Swift.RawRepresentable {}
extension FrolloSDK.User.Status : Swift.Equatable {}
extension FrolloSDK.User.Status : Swift.Hashable {}
extension FrolloSDK.User.Status : Swift.RawRepresentable {}
extension FrolloSDK.User.OtpMethodType : Swift.Equatable {}
extension FrolloSDK.User.OtpMethodType : Swift.Hashable {}
extension FrolloSDK.User.OtpMethodType : Swift.RawRepresentable {}
extension FrolloSDK.Consent.Status : Swift.Equatable {}
extension FrolloSDK.Consent.Status : Swift.Hashable {}
extension FrolloSDK.Consent.Status : Swift.RawRepresentable {}
extension FrolloSDK.ReportAccountBalance.Period : Swift.Equatable {}
extension FrolloSDK.ReportAccountBalance.Period : Swift.Hashable {}
extension FrolloSDK.ReportAccountBalance.Period : Swift.RawRepresentable {}
extension FrolloSDK.Provider.AuthType : Swift.Equatable {}
extension FrolloSDK.Provider.AuthType : Swift.Hashable {}
extension FrolloSDK.Provider.AuthType : Swift.RawRepresentable {}
extension FrolloSDK.Provider.EncryptionType : Swift.Equatable {}
extension FrolloSDK.Provider.EncryptionType : Swift.Hashable {}
extension FrolloSDK.Provider.EncryptionType : Swift.RawRepresentable {}
extension FrolloSDK.Provider.MFAType : Swift.Equatable {}
extension FrolloSDK.Provider.MFAType : Swift.Hashable {}
extension FrolloSDK.Provider.MFAType : Swift.RawRepresentable {}
extension FrolloSDK.Provider.Status : Swift.Equatable {}
extension FrolloSDK.Provider.Status : Swift.Hashable {}
extension FrolloSDK.Provider.Status : Swift.RawRepresentable {}
extension FrolloSDK.Provider.AggregatorType : Swift.Equatable {}
extension FrolloSDK.Provider.AggregatorType : Swift.Hashable {}
extension FrolloSDK.Provider.AggregatorType : Swift.RawRepresentable {}
extension FrolloSDK.BudgetCategory : Swift.Equatable {}
extension FrolloSDK.BudgetCategory : Swift.Hashable {}
extension FrolloSDK.BudgetCategory : Swift.RawRepresentable {}
extension FrolloSDK.Address.AddressType : Swift.Equatable {}
extension FrolloSDK.Address.AddressType : Swift.Hashable {}
extension FrolloSDK.Address.AddressType : Swift.RawRepresentable {}
extension FrolloSDK.Contact.ContactType : Swift.Equatable {}
extension FrolloSDK.Contact.ContactType : Swift.Hashable {}
extension FrolloSDK.Contact.ContactType : Swift.RawRepresentable {}
extension FrolloSDK.AccountPayIDResponse.PayIDStatus : Swift.Equatable {}
extension FrolloSDK.AccountPayIDResponse.PayIDStatus : Swift.Hashable {}
extension FrolloSDK.AccountPayIDResponse.PayIDStatus : Swift.RawRepresentable {}
extension FrolloSDK.NetworkError.NetworkErrorType : Swift.Equatable {}
extension FrolloSDK.NetworkError.NetworkErrorType : Swift.Hashable {}
extension FrolloSDK.NetworkError.NetworkErrorType : Swift.RawRepresentable {}
extension FrolloSDK.Reports.Period : Swift.Equatable {}
extension FrolloSDK.Reports.Period : Swift.Hashable {}
extension FrolloSDK.Reports.Period : Swift.RawRepresentable {}
extension FrolloSDK.CDRConsentForm.Put.Status : Swift.Equatable {}
extension FrolloSDK.CDRConsentForm.Put.Status : Swift.Hashable {}
extension FrolloSDK.CDRConsentForm.Put.Status : Swift.RawRepresentable {}
extension FrolloSDK.Budget.Frequency : Swift.Equatable {}
extension FrolloSDK.Budget.Frequency : Swift.Hashable {}
extension FrolloSDK.Budget.Frequency : Swift.RawRepresentable {}
extension FrolloSDK.Budget.Status : Swift.Equatable {}
extension FrolloSDK.Budget.Status : Swift.Hashable {}
extension FrolloSDK.Budget.Status : Swift.RawRepresentable {}
extension FrolloSDK.Budget.TrackingStatus : Swift.Equatable {}
extension FrolloSDK.Budget.TrackingStatus : Swift.Hashable {}
extension FrolloSDK.Budget.TrackingStatus : Swift.RawRepresentable {}
extension FrolloSDK.Budget.BudgetType : Swift.Equatable {}
extension FrolloSDK.Budget.BudgetType : Swift.Hashable {}
extension FrolloSDK.Budget.BudgetType : Swift.RawRepresentable {}
extension FrolloSDK.Budget.TrackingType : Swift.Equatable {}
extension FrolloSDK.Budget.TrackingType : Swift.Hashable {}
extension FrolloSDK.Budget.TrackingType : Swift.RawRepresentable {}
extension FrolloSDK.Account.AccountFeatureType : Swift.Equatable {}
extension FrolloSDK.Account.AccountFeatureType : Swift.Hashable {}
extension FrolloSDK.Account.AccountFeatureType : Swift.RawRepresentable {}
extension FrolloSDK.Account.AccountFeatureSubType : Swift.Equatable {}
extension FrolloSDK.Account.AccountFeatureSubType : Swift.Hashable {}
extension FrolloSDK.Account.AccountFeatureSubType : Swift.RawRepresentable {}
extension FrolloSDK.Account.AccountStatus : Swift.Equatable {}
extension FrolloSDK.Account.AccountStatus : Swift.Hashable {}
extension FrolloSDK.Account.AccountStatus : Swift.RawRepresentable {}
extension FrolloSDK.Account.AccountSubType : Swift.Equatable {}
extension FrolloSDK.Account.AccountSubType : Swift.Hashable {}
extension FrolloSDK.Account.AccountSubType : Swift.RawRepresentable {}
extension FrolloSDK.Account.AccountType : Swift.Equatable {}
extension FrolloSDK.Account.AccountType : Swift.Hashable {}
extension FrolloSDK.Account.AccountType : Swift.RawRepresentable {}
extension FrolloSDK.Account.Classification : Swift.Equatable {}
extension FrolloSDK.Account.Classification : Swift.Hashable {}
extension FrolloSDK.Account.Classification : Swift.RawRepresentable {}
extension FrolloSDK.Account.Group : Swift.Equatable {}
extension FrolloSDK.Account.Group : Swift.Hashable {}
extension FrolloSDK.Account.Group : Swift.RawRepresentable {}
extension FrolloSDK.UserKYC.IdentityDocument.IDType : Swift.Equatable {}
extension FrolloSDK.UserKYC.IdentityDocument.IDType : Swift.Hashable {}
extension FrolloSDK.UserKYC.IdentityDocument.IDType : Swift.RawRepresentable {}
extension FrolloSDK.Aggregation.OrderType : Swift.Equatable {}
extension FrolloSDK.Aggregation.OrderType : Swift.Hashable {}
extension FrolloSDK.Aggregation.OrderType : Swift.RawRepresentable {}
extension FrolloSDK.Aggregation.SortType : Swift.Equatable {}
extension FrolloSDK.Aggregation.SortType : Swift.Hashable {}
extension FrolloSDK.Aggregation.SortType : Swift.RawRepresentable {}
extension FrolloSDK.CDRProduct.CDRProductCategory : Swift.Equatable {}
extension FrolloSDK.CDRProduct.CDRProductCategory : Swift.Hashable {}
extension FrolloSDK.CDRProduct.CDRProductCategory : Swift.RawRepresentable {}
extension FrolloSDK.Survey.Question.QuestionType : Swift.Equatable {}
extension FrolloSDK.Survey.Question.QuestionType : Swift.Hashable {}
extension FrolloSDK.Survey.Question.QuestionType : Swift.RawRepresentable {}
extension FrolloSDK.Survey.Question.Answer.AnswerType : Swift.Equatable {}
extension FrolloSDK.Survey.Question.Answer.AnswerType : Swift.Hashable {}
extension FrolloSDK.Survey.Question.Answer.AnswerType : Swift.RawRepresentable {}
extension FrolloSDK.PayIDContact.PayIDType : Swift.Equatable {}
extension FrolloSDK.PayIDContact.PayIDType : Swift.Hashable {}
extension FrolloSDK.PayIDContact.PayIDType : Swift.RawRepresentable {}
extension FrolloSDK.Message.ContentType : Swift.Equatable {}
extension FrolloSDK.Message.ContentType : Swift.Hashable {}
extension FrolloSDK.Message.ContentType : Swift.RawRepresentable {}
extension FrolloSDK.Message.OpenMode : Swift.Equatable {}
extension FrolloSDK.Message.OpenMode : Swift.Hashable {}
extension FrolloSDK.Message.OpenMode : Swift.RawRepresentable {}
extension FrolloSDK.APIErrorCode : Swift.Equatable {}
extension FrolloSDK.APIErrorCode : Swift.Hashable {}
extension FrolloSDK.APIErrorCode : Swift.RawRepresentable {}
extension FrolloSDK.Goal.Frequency : Swift.Equatable {}
extension FrolloSDK.Goal.Frequency : Swift.Hashable {}
extension FrolloSDK.Goal.Frequency : Swift.RawRepresentable {}
extension FrolloSDK.Goal.Status : Swift.Equatable {}
extension FrolloSDK.Goal.Status : Swift.Hashable {}
extension FrolloSDK.Goal.Status : Swift.RawRepresentable {}
extension FrolloSDK.Goal.Target : Swift.Equatable {}
extension FrolloSDK.Goal.Target : Swift.Hashable {}
extension FrolloSDK.Goal.Target : Swift.RawRepresentable {}
extension FrolloSDK.Goal.TrackingStatus : Swift.Equatable {}
extension FrolloSDK.Goal.TrackingStatus : Swift.Hashable {}
extension FrolloSDK.Goal.TrackingStatus : Swift.RawRepresentable {}
extension FrolloSDK.Goal.TrackingType : Swift.Equatable {}
extension FrolloSDK.Goal.TrackingType : Swift.Hashable {}
extension FrolloSDK.Goal.TrackingType : Swift.RawRepresentable {}
extension FrolloSDK.PayDay.Period : Swift.Equatable {}
extension FrolloSDK.PayDay.Period : Swift.Hashable {}
extension FrolloSDK.PayDay.Period : Swift.RawRepresentable {}
extension FrolloSDK.PayDay.Status : Swift.Equatable {}
extension FrolloSDK.PayDay.Status : Swift.Hashable {}
extension FrolloSDK.PayDay.Status : Swift.RawRepresentable {}
extension FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode : Swift.Equatable {}
extension FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode : Swift.Hashable {}
extension FrolloSDK.APIUserPayIDOTPRequest.PayIDOtpRequestMode : Swift.RawRepresentable {}
extension FrolloSDK.ReportGrouping : Swift.Equatable {}
extension FrolloSDK.ReportGrouping : Swift.Hashable {}
extension FrolloSDK.ReportGrouping : Swift.RawRepresentable {}
extension FrolloSDK.Card.CardStatus : Swift.Equatable {}
extension FrolloSDK.Card.CardStatus : Swift.Hashable {}
extension FrolloSDK.Card.CardStatus : Swift.RawRepresentable {}
extension FrolloSDK.Card.CardDesignType : Swift.Equatable {}
extension FrolloSDK.Card.CardDesignType : Swift.Hashable {}
extension FrolloSDK.Card.CardDesignType : Swift.RawRepresentable {}
extension FrolloSDK.Card.CardIssuer : Swift.Equatable {}
extension FrolloSDK.Card.CardIssuer : Swift.Hashable {}
extension FrolloSDK.Card.CardIssuer : Swift.RawRepresentable {}
extension FrolloSDK.Card.CardType : Swift.Equatable {}
extension FrolloSDK.Card.CardType : Swift.Hashable {}
extension FrolloSDK.Card.CardType : Swift.RawRepresentable {}
extension FrolloSDK.OAuth2Error.OAuth2ErrorType : Swift.Equatable {}
extension FrolloSDK.OAuth2Error.OAuth2ErrorType : Swift.Hashable {}
extension FrolloSDK.OAuth2Error.OAuth2ErrorType : Swift.RawRepresentable {}
extension FrolloSDK.TransactionCategory.CategoryType : Swift.Equatable {}
extension FrolloSDK.TransactionCategory.CategoryType : Swift.Hashable {}
extension FrolloSDK.TransactionCategory.CategoryType : Swift.RawRepresentable {}
extension FrolloSDK.LogLevel : Swift.Equatable {}
extension FrolloSDK.LogLevel : Swift.Hashable {}
extension FrolloSDK.LogLevel : Swift.RawRepresentable {}
extension FrolloSDK.APIError.APIErrorType : Swift.Equatable {}
extension FrolloSDK.APIError.APIErrorType : Swift.Hashable {}
extension FrolloSDK.APIError.APIErrorType : Swift.RawRepresentable {}
extension FrolloSDK.OAuth2Authentication.AuthenticationStatus : Swift.Equatable {}
extension FrolloSDK.OAuth2Authentication.AuthenticationStatus : Swift.Hashable {}
